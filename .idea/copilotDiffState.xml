<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/abstraction/Employee.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/abstraction/Employee.java" />
              <option name="originalContent" value="&#10;/**&#10; * Employee class demonstrating different access modifiers&#10; * - private: salary (most restrictive, only accessible within this class)&#10; * - default: employeeId (accessible within same package)&#10; * - protected: department (accessible within same package and subclasses)&#10; * - public: name and methods (accessible from anywhere)&#10; */&#10;public class Employee {&#10;    // Private member - only accessible within Employee class&#10;    private double salary;&#10;    &#10;    // Default (package-private) member - accessible within same package&#10;    int employeeId;&#10;    &#10;    // Protected member - accessible within same package and subclasses&#10;    protected String department;&#10;    &#10;    // Public members - accessible from anywhere&#10;    public String name;&#10;    &#10;    // Constructor&#10;    public Employee(String name, int employeeId, String department, double salary) {&#10;        this.name = name;&#10;        this.employeeId = employeeId;&#10;        this.department = department;&#10;        this.salary = salary;&#10;    }&#10;    &#10;    // Public method to access private salary - only way to get salary from outside&#10;    public double getSalary() {&#10;        return salary;&#10;    }&#10;    &#10;    // Public method to update salary&#10;    public void setSalary(double salary) {&#10;        this.salary = salary;&#10;    }&#10;    &#10;    // Public method for general information&#10;    public String getEmployeeInfo() {&#10;        return &quot;Employee: &quot; + name + &quot;, ID: &quot; + employeeId + &quot;, Department: &quot; + department;&#10;    }&#10;    &#10;    // Protected method - accessible to subclasses and same package&#10;    protected void generateDepartmentReport() {&#10;        System.out.println(&quot;Generating report for department: &quot; + department);&#10;    }&#10;    &#10;    // Default method - accessible within same package only&#10;    void updateEmployeeRecord() {&#10;        System.out.println(&quot;Updating record for employee ID: &quot; + employeeId);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.abstraction;&#10;&#10;/**&#10; * Employee class demonstrating different access modifiers&#10; * - private: salary (most restrictive, only accessible within this class)&#10; * - default: employeeId (accessible within same package)&#10; * - protected: department (accessible within same package and subclasses)&#10; * - public: name and methods (accessible from anywhere)&#10; */&#10;public class Employee {&#10;    // Private member - only accessible within Employee class&#10;    private double salary;&#10;    &#10;    // Default (package-private) member - accessible within same package&#10;    int employeeId;&#10;    &#10;    // Protected member - accessible within same package and subclasses&#10;    protected String department;&#10;    &#10;    // Public members - accessible from anywhere&#10;    public String name;&#10;    &#10;    // Constructor&#10;    public Employee(String name, int employeeId, String department, double salary) {&#10;        this.name = name;&#10;        this.employeeId = employeeId;&#10;        this.department = department;&#10;        this.salary = salary;&#10;    }&#10;    &#10;    // Public method to access private salary - only way to get salary from outside&#10;    public double getSalary() {&#10;        return salary;&#10;    }&#10;    &#10;    // Public method to update salary&#10;    public void setSalary(double salary) {&#10;        this.salary = salary;&#10;    }&#10;    &#10;    // Public method for general information&#10;    public String getEmployeeInfo() {&#10;        return &quot;Employee: &quot; + name + &quot;, ID: &quot; + employeeId + &quot;, Department: &quot; + department;&#10;    }&#10;    &#10;    // Protected method - accessible to subclasses and same package&#10;    protected void generateDepartmentReport() {&#10;        System.out.println(&quot;Generating report for department: &quot; + department);&#10;    }&#10;    &#10;    // Default method - accessible within same package only&#10;    void updateEmployeeRecord() {&#10;        System.out.println(&quot;Updating record for employee ID: &quot; + employeeId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/abstraction/HRPortal.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/abstraction/HRPortal.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/assignment10_functionalinterfaces/BankTransaction.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/assignment10_functionalinterfaces/BankTransaction.java" />
              <option name="originalContent" value="package com.assignment10_functionalinterfaces;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.Scanner;&#10;import java.util.function.*;&#10;&#10;public class BankTransaction {&#10;    public static void main(String[] args) {&#10;        List&lt;Double&gt; transactions = Arrays.asList(1200.0, 55000.0, 30000.0);&#10;        Predicate&lt;Double&gt; suspicious = (amount) -&gt; amount &gt; 50000.0;&#10;        Consumer&lt;Double&gt; printAmount = (amount) -&gt; System.out.println(&quot;Processed transaction of ₹&quot; + amount);&#10;        Supplier&lt;Integer&gt; otp = () -&gt; new Random().nextInt(9000) + 1000;&#10;        Function&lt;Double, Double&gt; processingFee = (amount) -&gt; amount - (amount * 0.02);&#10;        BiFunction&lt;Double, Double, Double&gt; discountPrice = (amount, feePercentage) -&gt; amount - (amount * feePercentage / 100);&#10;        boolean loyaltyPoints = true;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        System.out.println(&quot;Bank Transaction Processing System\n&quot;);&#10;&#10;        for (Double amount : transactions) {&#10;            System.out.println(&quot;Processing transaction: ₹&quot; + amount);&#10;&#10;            // Check if transaction is suspicious&#10;            if (suspicious.test(amount)) {&#10;                System.out.println(&quot;Alert: Transaction amount ₹&quot; + amount + &quot; is suspicious (&gt; ₹50,000)&quot;);&#10;                System.out.print(&quot;Do you want to continue? (Y/N): &quot;);&#10;                char ch = sc.next().charAt(0);&#10;                if (ch == 'N' || ch == 'n') {&#10;                    System.out.println(&quot;Transaction cancelled.\n&quot;);&#10;                    continue;&#10;                }&#10;            }&#10;&#10;            // Generate OTP&#10;            int otpValue = otp.get();&#10;            System.out.println(&quot;Transaction OTP: &quot; + otpValue);&#10;&#10;            // Apply processing fee (2%)&#10;            Double processingFeeAmount = amount * 0.02;&#10;            Double amountAfterFee = processingFee.apply(amount);&#10;            System.out.println(&quot;Processing fee (2%): ₹&quot; + processingFeeAmount);&#10;            System.out.println(&quot;Amount after processing fee: ₹&quot; + amountAfterFee);&#10;&#10;            // Apply discount on processing fee if loyalty points exist&#10;            Double finalAmount = amountAfterFee;&#10;            if (loyaltyPoints) {&#10;                // BiFunction applies discount on the processing fee&#10;                // finalAmount = amount - (amount * feePercentage / 100)&#10;                // Here we're reducing the fee percentage from 2% to 1% (50% discount on fee)&#10;                finalAmount = discountPrice.apply(amount, 1.0); // 1% effective fee instead of 2%&#10;                Double discountedFee = amount * 0.01;&#10;                Double feeSavings = processingFeeAmount - discountedFee;&#10;                System.out.println(&quot;Loyalty discount applied: 50% off processing fee&quot;);&#10;                System.out.println(&quot;Discounted processing fee (1%): ₹&quot; + discountedFee);&#10;                System.out.println(&quot;Fee savings: ₹&quot; + feeSavings);&#10;                System.out.println(&quot;Final amount after discounted fee: ₹&quot; + finalAmount);&#10;            }&#10;&#10;            // Process and print the transaction&#10;            printAmount.accept(finalAmount);&#10;            System.out.println();&#10;        }&#10;&#10;        sc.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.assignment10_functionalinterfaces;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.Scanner;&#10;import java.util.function.*;&#10;&#10;public class BankTransaction {&#10;    public static void main(String[] args) {&#10;        List&lt;Double&gt; transactions = Arrays.asList(1200.0, 55000.0, 30000.0);&#10;        Predicate&lt;Double&gt; suspicious = (amount) -&gt; amount &gt; 50000.0;&#10;        Consumer&lt;Double&gt; printAmount = (amount) -&gt; System.out.println(&quot;Processed transaction of ₹&quot; + amount);&#10;        Supplier&lt;Integer&gt; otp = () -&gt; new Random().nextInt(9000) + 1000;&#10;        Function&lt;Double, Double&gt; processingFee = (amount) -&gt; amount - (amount * 0.02);&#10;        BiFunction&lt;Double, Double, Double&gt; discountPrice = (amount, feePercentage) -&gt; amount - (amount * feePercentage / 100);&#10;        boolean loyaltyPoints = true;&#10;        Scanner sc = new Scanner(System.in);&#10;&#10;        System.out.println(&quot;Bank Transaction Processing System\n&quot;);&#10;&#10;        for (Double amount : transactions) {&#10;            System.out.println(&quot;Processing transaction: ₹&quot; + amount);&#10;&#10;            if (suspicious.test(amount)) {&#10;                System.out.println(&quot;Alert: Transaction amount ₹&quot; + amount + &quot; is suspicious (&gt; ₹50,000)&quot;);&#10;                System.out.print(&quot;Do you want to continue? (Y/N): &quot;);&#10;                char ch = sc.next().charAt(0);&#10;                if (ch == 'N' || ch == 'n') {&#10;                    System.out.println(&quot;Transaction cancelled.\n&quot;);&#10;                    continue;&#10;                }&#10;            }&#10;&#10;            int otpValue = otp.get();&#10;            System.out.println(&quot;Transaction OTP: &quot; + otpValue);&#10;&#10;            Double processingFeeAmount = amount * 0.02;&#10;            Double amountAfterFee = processingFee.apply(amount);&#10;            System.out.println(&quot;Processing fee (2%): ₹&quot; + processingFeeAmount);&#10;            System.out.println(&quot;Amount after processing fee: ₹&quot; + amountAfterFee);&#10;            &#10;            Double finalAmount = amountAfterFee;&#10;            if (loyaltyPoints) {&#10;                finalAmount = discountPrice.apply(amount, 1.0);&#10;                Double discountedFee = amount * 0.01;&#10;                Double feeSavings = processingFeeAmount - discountedFee;&#10;                System.out.println(&quot;Loyalty discount applied: 50% off processing fee&quot;);&#10;                System.out.println(&quot;Discounted processing fee (1%): ₹&quot; + discountedFee);&#10;                System.out.println(&quot;Fee savings: ₹&quot; + feeSavings);&#10;                System.out.println(&quot;Final amount after discounted fee: ₹&quot; + finalAmount);&#10;            }&#10;&#10;            printAmount.accept(finalAmount);&#10;            System.out.println();&#10;        }&#10;&#10;        sc.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/assignment10_functionalinterfaces/OnlineShopping.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/assignment10_functionalinterfaces/OnlineShopping.java" />
              <option name="originalContent" value="package com.assignment10_functionalinterfaces;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.function.*;&#10;&#10;public class OnlineShopping {&#10;    public static void main(String[] args) {&#10;        List&lt;Double&gt; ordersUSD = Arrays.asList(50.0, 150.0, 300.0);&#10;        Predicate&lt;Double&gt; isFreeShipping = (amount)-&gt;amount&gt;2000.0;&#10;        Consumer&lt;Double&gt; orderPlaced = (amount)-&gt; System.out.println(&quot;Order placed successfully for Rs.&quot;+amount);&#10;        Supplier&lt;String&gt; otp = ()-&gt; &quot;SAVE123&quot;;&#10;        Function&lt;Double,Double&gt; usdToInr = (amount)-&gt;amount*87.09;&#10;        BiFunction&lt;Double,Double,Double&gt; discountPrice = (amount, discount)-&gt; amount = amount - (amount * discount / 100);&#10;        for(Double amount:ordersUSD){&#10;            amount=usdToInr.apply(amount);&#10;            if(isFreeShipping.test(amount)){&#10;                System.out.println(&quot;Congratulations! Your order is eligible for free delivery&quot;);&#10;            }&#10;            System.out.println(otp.get());&#10;            amount = discountPrice.apply(amount,10.0);&#10;            orderPlaced.accept(amount);&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.assignment10_functionalinterfaces;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.function.*;&#10;&#10;public class OnlineShopping {&#10;    public static void main(String[] args) {&#10;        List&lt;Double&gt; ordersUSD = Arrays.asList(50.0, 150.0, 300.0);&#10;        Predicate&lt;Double&gt; isFreeShipping = (amount) -&gt; amount &gt; 2000.0;&#10;        Consumer&lt;Double&gt; orderPlaced = (amount) -&gt; System.out.println(&quot;Order placed successfully for ₹&quot; + amount);&#10;        Supplier&lt;String&gt; couponCode = () -&gt; &quot;SAVE&quot; + (new Random().nextInt(900) + 100);&#10;        Function&lt;Double, Double&gt; usdToInr = (amount) -&gt; amount * 83.0;&#10;        BiFunction&lt;Double, Double, Double&gt; discountPrice = (amount, discount) -&gt; amount - (amount * discount / 100);&#10;        &#10;        System.out.println(&quot;Online Shopping System\n&quot;);&#10;        &#10;        for (Double amountUSD : ordersUSD) {&#10;            System.out.println(&quot;Processing order: $&quot; + amountUSD);&#10;            &#10;            Double amountINR = usdToInr.apply(amountUSD);&#10;            System.out.println(&quot;Converted to INR: ₹&quot; + amountINR);&#10;            &#10;            if (isFreeShipping.test(amountINR)) {&#10;                System.out.println(&quot;Congratulations! Your order qualifies for free shipping (above ₹2000)&quot;);&#10;            } else {&#10;                System.out.println(&quot;Order does not qualify for free shipping&quot;);&#10;            }&#10;            &#10;            String coupon = couponCode.get();&#10;            System.out.println(&quot;Coupon code: &quot; + coupon);&#10;            &#10;            Double finalAmount = discountPrice.apply(amountINR, 10.0);&#10;            System.out.println(&quot;Amount after 10% discount: ₹&quot; + finalAmount);&#10;            &#10;            orderPlaced.accept(finalAmount);&#10;            System.out.println();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/assignment6/assignment1/package1/AccessModifierDemo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/assignment6/assignment1/package1/AccessModifierDemo.java" />
              <option name="updatedContent" value="package com.assignment6.assignment1.package1;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/management/Manager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/management/Manager.java" />
              <option name="updatedContent" value="package com.management;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>