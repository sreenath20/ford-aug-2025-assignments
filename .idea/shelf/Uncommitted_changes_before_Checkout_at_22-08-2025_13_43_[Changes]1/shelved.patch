Index: src/main/java/com/assignment8_collections/assignment2/authorAlphabeticOrder.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment2/authorAlphabeticOrder.java b/src/main/java/com/assignment8_collections/assignment2/authorAlphabeticOrder.java
new file mode 100644
--- /dev/null	(date 1755545062758)
+++ b/src/main/java/com/assignment8_collections/assignment2/authorAlphabeticOrder.java	(date 1755545062758)
@@ -0,0 +1,10 @@
+package com.assignment8_collections.assignment2;
+import java.util.*;
+public class authorAlphabeticOrder  implements Comparator<Book>{
+    @Override
+    public int compare(Book o1, Book o2) {
+        return CharSequence.compare(o1.getAuthor(),o2.getAuthor());
+    }
+
+
+}
Index: src/main/java/com/oops/day10_set/Maps/Employee.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Maps/Employee.java b/src/main/java/com/oops/day10_set/Maps/Employee.java
new file mode 100644
--- /dev/null	(date 1755592327830)
+++ b/src/main/java/com/oops/day10_set/Maps/Employee.java	(date 1755592327830)
@@ -0,0 +1,70 @@
+package com.oops.day10_set.Maps;
+
+import java.util.Objects;
+
+
+
+
+public class Employee extends Object implements Comparable<Employee> {
+    private Integer id;
+    private String name;
+    private Double salary;
+
+    public Employee(int id, String name, double salary) {
+        this.id = id;
+        this.name = name;
+        this.salary = salary;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return Objects.equals(id, employee.id) && Objects.equals(name, employee.name) && Objects.equals(salary, employee.salary);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id, name, salary);
+    }
+
+    @Override
+    public int compareTo(Employee o) {
+        return this.name.compareTo(o.name);
+    }
+}
+
+
Index: src/main/java/day10_streams/StreamDriver.java
===================================================================
diff --git a/src/main/java/day10_streams/StreamDriver.java b/src/main/java/day10_streams/StreamDriver.java
new file mode 100644
--- /dev/null	(date 1755676265040)
+++ b/src/main/java/day10_streams/StreamDriver.java	(date 1755676265040)
@@ -0,0 +1,38 @@
+package day10_streams;
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class StreamDriver {
+    public static void main(String[] args) {
+        List<String> names=new ArrayList<>();
+        names.add("aaa");
+        names.add("bbb");
+        names.add("ccc");
+        names.add("dddd");
+
+        names.stream().map((String name)->name.length()).forEach((Integer data)-> System.out.println(data));
+
+        Integer sum=names.stream().mapToInt((String name)->name.length()).sum();
+        System.out.println("Total length of all names: " +sum);
+        OptionalInt min=names.stream().mapToInt((String name)->name.length()).min();
+        if(min.isPresent())
+            System.out.println("Minimum length of all names: " +min.getAsInt());
+        else
+            System.out.println("No names available to find minimum length.");
+        System.out.println("Minimum length of all names: " +min.getAsInt());
+        List<Integer> numbers=names.stream().map((String name)->name.length()).toList();
+        System.out.println("List of lengths: " + numbers);
+
+        names.stream().filter((String name)->name.length()>3).forEach((String name)-> System.out.println(name));
+        List<Integer> integerlist=new ArrayList<>();
+        integerlist.add(25);
+        integerlist.add(15);
+        integerlist.add(20);
+        System.out.println("display even numbers");
+        integerlist.stream().filter((Integer number)->number%2==0).forEach((Integer number)-> System.out.println(number));
+        System.out.println("display in sorted  numbers");
+        integerlist.stream().sorted().forEach((Integer number)->System.out.println(number));
+        System.out.println("Int list is not sorted: " + integerlist);
+
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment4/Student.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment4/Student.java b/src/main/java/com/assignment8_collections/assignment4/Student.java
new file mode 100644
--- /dev/null	(date 1755622545195)
+++ b/src/main/java/com/assignment8_collections/assignment4/Student.java	(date 1755622545195)
@@ -0,0 +1,65 @@
+package com.assignment8_collections.assignment4;
+
+import java.util.*;
+
+public class Student extends Object implements Comparable<Student> {
+    private Integer rollNo;
+    private String name;
+    private Double marks;
+
+    public Student(Integer rollNo, String name, Double marks) {
+        this.rollNo = rollNo;
+        this.name = name;
+        this.marks = marks;
+    }
+
+    public Integer getRollNo() {
+        return rollNo;
+    }
+
+    public void setRollNo(Integer rollNo) {
+        this.rollNo = rollNo;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getMarks() {
+        return marks;
+    }
+
+    public void setMarks(Double marks) {
+        this.marks = marks;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Student student = (Student) o;
+        return Objects.equals(marks, student.marks);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(marks);
+    }
+
+    @Override
+    public int compareTo(Student o) {
+        return this.marks.compareTo(o.marks);
+    }
+
+    @Override
+    public String toString() {
+        return "Student{" +
+                "rollNo=" + rollNo +
+                ", name='" + name + '\'' +
+                ", marks=" + marks +
+                '}';
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment4/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment4/Driver.java b/src/main/java/com/assignment8_collections/assignment4/Driver.java
new file mode 100644
--- /dev/null	(date 1755662896778)
+++ b/src/main/java/com/assignment8_collections/assignment4/Driver.java	(date 1755662896778)
@@ -0,0 +1,80 @@
+package com.assignment8_collections.assignment4;
+
+import java.util.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        Scanner input = new Scanner(System.in);
+        List<Student> students = new ArrayList<>();
+        students.add(new Student(4, "aaa", 87.5));
+        students.add(new Student(2, "ddd", 90.0));
+        students.add(new Student(3, "ccc", 85.5));
+        System.out.println("student list " + students);
+        Collections.sort(students);
+        System.out.println("sorted student list by marks (ascending) " + students);
+        
+        // Sort in reverse order (descending)
+        Collections.sort(students, Collections.reverseOrder());
+        System.out.println("sorted student list by marks (descending) " + students);
+        System.out.println();
+
+        System.out.println(" student list before sorting by name" + students);
+
+        Collections.sort(students, new NameComparator());
+        System.out.println("student list after  by nameSorting by name" + students);
+        System.out.println();
+
+        System.out.println("sorted student list by roll no " + students);
+        Collections.sort(students, new rollNoComparator());
+        System.out.println(students);
+        System.out.println();
+
+        System.out.println("enter the roll number to delete: ");
+        Integer rollnodelete = input.nextInt();
+        for (Student s : students) {
+            if (s.getRollNo().equals(rollnodelete)) {
+                students.remove(s);
+                System.out.println("student with roll no " + rollnodelete + " deleted successfully");
+                break;
+            }
+        }
+        System.out.println("student list after deleting   is: " + students);
+        System.out.println();
+        System.out.println("enter the roll number to update: ");
+        Integer rollnoupdate = input.nextInt();
+        for (Student s : students) {
+            if (s.getRollNo().equals(rollnoupdate)) {
+                System.out.println("enter the new mark: ");
+                Double newmark = input.nextDouble();
+                s.setMarks(newmark);
+                System.out.println("student with roll no " + rollnodelete + " update successfully");
+                break;
+            }
+        }
+        System.out.println("student list after updating marks is: " + students);
+        System.out.println();
+
+
+        System.out.println("enter the roll number to find: ");
+        Integer rollno = input.nextInt();
+
+        boolean found = false;
+        for (Student s : students) {
+            if (s.getRollNo().equals(rollno)) {
+                System.out.println("student with roll no " + rollno + " found: " + s);
+                found = true;
+                break;
+            }
+        }
+        if (!found) {
+            System.out.println("student with roll no " + rollno + " not found");
+        }
+
+
+
+
+    }
+
+
+}
+
Index: src/main/java/com/assignment8_collections/assignment4/NameComparator.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment4/NameComparator.java b/src/main/java/com/assignment8_collections/assignment4/NameComparator.java
new file mode 100644
--- /dev/null	(date 1755623546293)
+++ b/src/main/java/com/assignment8_collections/assignment4/NameComparator.java	(date 1755623546293)
@@ -0,0 +1,8 @@
+package com.assignment8_collections.assignment4;
+import java.util.*;
+public class NameComparator implements  Comparator<Student> {
+    @Override
+    public int compare(Student s1, Student s2) {
+        return s1.getName().compareTo(s2.getName());
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment4/rollNoComparator.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment4/rollNoComparator.java b/src/main/java/com/assignment8_collections/assignment4/rollNoComparator.java
new file mode 100644
--- /dev/null	(date 1755623546334)
+++ b/src/main/java/com/assignment8_collections/assignment4/rollNoComparator.java	(date 1755623546334)
@@ -0,0 +1,9 @@
+package com.assignment8_collections.assignment4;
+import java.util.*;
+public class rollNoComparator implements Comparator<Student> {
+
+    @Override
+    public int compare(Student s1, Student s2) {
+        return s1.getRollNo().compareTo(s2.getRollNo());
+    }
+}
Index: src/main/java/com/assignment9_set/assignment1/Employee.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment1/Employee.java b/src/main/java/com/assignment9_set/assignment1/Employee.java
new file mode 100644
--- /dev/null	(date 1755631493530)
+++ b/src/main/java/com/assignment9_set/assignment1/Employee.java	(date 1755631493530)
@@ -0,0 +1,65 @@
+package com.assignment9_set.assignment1;
+
+import java.util.*;
+
+public class Employee extends Object implements Comparable<Employee> {
+    private Integer id;
+    private String name;
+    private String department;
+
+    public Employee(Integer id, String name, String department) {
+            this.id = id;
+            this.name = name;
+            this.department = department;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDepartment() {
+        return department;
+    }
+
+    public void setDepartment(String department) {
+        this.department = department;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", department='" + department + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return id == employee.id && department.equals(employee.department);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id,department);
+    }
+
+    @Override
+    public int compareTo(Employee o) {
+        return this.id.compareTo(o.id);
+    }
+}
Index: src/main/java/com/assignment9_set/assignment1/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment1/Driver.java b/src/main/java/com/assignment9_set/assignment1/Driver.java
new file mode 100644
--- /dev/null	(date 1755631493536)
+++ b/src/main/java/com/assignment9_set/assignment1/Driver.java	(date 1755631493536)
@@ -0,0 +1,63 @@
+package com.assignment9_set.assignment1;
+
+import java.util.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        Set<Employee> employeeset = new HashSet<Employee>();
+        employeeset.add(new Employee(4, "aaa", "HR"));
+        employeeset.add(new Employee(2, "bbb", "Finance"));
+        employeeset.add(new Employee(3, "ddd", "IT"));
+        System.out.println("employee set: " + employeeset);
+        System.out.println();
+
+        System.out.println("Removing employee with id 2");
+        for (Employee e : employeeset) {
+            if (e.getId() == 2) {
+                employeeset.remove(e);
+                break;
+            }
+        }
+        System.out.println("employee set after removal: " + employeeset);
+        System.out.println();
+
+        System.out.println("Adding employee's department b employee id 3");
+        for (Employee e : employeeset) {
+            if (e.getId() == 3) {
+                e.setDepartment("marketing");
+                break;
+            }
+        }
+        System.out.println("employee set after adding department: " + employeeset);
+        System.out.println();
+
+        System.out.println("Find emplpoyee by id  3");
+        for(Employee e : employeeset) {
+            if (e.getId() == 3) {
+                System.out.println("Found employee: " + e);
+                break;
+            }
+        }
+        System.out.println();
+
+        System.out.println("Find employee by department 'marketing'");
+        for(Employee e : employeeset) {
+            if (e.getDepartment().equals("marketing")) {
+                System.out.println("Found employee: " + e);
+                break;
+            }
+        }
+        System.out.println();
+
+        System.out.println(" Display employees sorted by name (Comparator)");
+        List<Employee> employeeList = new ArrayList<>(employeeset);
+        Collections.sort(employeeList, new NameComparator());
+        System.out.println("Employee sorted by name: " + employeeList);
+        System.out.println();
+
+        System.out.println(" Display employees sorted by department and then by ID.");
+        Set<Employee> sortedSet = new TreeSet<Employee>(employeeset);
+        System.out.println("Sorted Employee Set: " + sortedSet);
+
+    }
+}
Index: src/main/java/com/assignment9_set/assignment3/Student.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment3/Student.java b/src/main/java/com/assignment9_set/assignment3/Student.java
new file mode 100644
--- /dev/null	(date 1755708793028)
+++ b/src/main/java/com/assignment9_set/assignment3/Student.java	(date 1755708793028)
@@ -0,0 +1,52 @@
+package com.assignment9_set.assignment3;
+import java.util.*;
+public class Student extends Object implements Comparable<Student>{
+    private Integer studentId;
+    private String name;
+
+    public Student(Integer studentId, String name) {
+        this.studentId = studentId;
+        this.name = name;
+    }
+
+    public Integer getStudentId() {
+        return studentId;
+    }
+
+    public void setStudentId(Integer studentId) {
+        this.studentId = studentId;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public String toString() {
+        return "Student{" +
+                "studentId=" + studentId +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Student o) {
+        return this.name.compareTo(o.name);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Student student = (Student) o;
+        return  Objects.equals(name, student.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash( name);
+    }
+}
Index: src/main/java/com/oops/day9_generic/Pair.java
===================================================================
diff --git a/src/main/java/com/oops/day9_generic/Pair.java b/src/main/java/com/oops/day9_generic/Pair.java
new file mode 100644
--- /dev/null	(date 1755495443103)
+++ b/src/main/java/com/oops/day9_generic/Pair.java	(date 1755495443103)
@@ -0,0 +1,6 @@
+package com.oops.day9_generic;
+
+public interface Pair<K,V>{
+    K getKey();
+    V getValue();
+}
Index: src/main/java/com/oops/day9_generic/Box.java
===================================================================
diff --git a/src/main/java/com/oops/day9_generic/Box.java b/src/main/java/com/oops/day9_generic/Box.java
new file mode 100644
--- /dev/null	(date 1755496048401)
+++ b/src/main/java/com/oops/day9_generic/Box.java	(date 1755496048401)
@@ -0,0 +1,23 @@
+package com.oops.day9_generic;
+
+public class Box<T> {
+    private T data;
+
+    public Box() {}
+    public Box(T data) {
+        this.data = data;
+    }
+    public T getData() {
+        return this.data;
+    }
+    public void setData(T data) {
+        this.data = data;
+    }
+
+    @Override
+    public String toString() {
+        return "Box{" +
+                "data=" + data +
+                '}';
+    }
+}
Index: src/main/java/com/oops/day9_generic/Orderpair.java
===================================================================
diff --git a/src/main/java/com/oops/day9_generic/Orderpair.java b/src/main/java/com/oops/day9_generic/Orderpair.java
new file mode 100644
--- /dev/null	(date 1755495968353)
+++ b/src/main/java/com/oops/day9_generic/Orderpair.java	(date 1755495968353)
@@ -0,0 +1,34 @@
+package com.oops.day9_generic;
+
+public class Orderpair <k,V> implements Pair<k,V> {
+    private k key;
+    private V value;
+
+    public Orderpair(k key, V value) {
+        this.key = key;
+        this.value = value;
+    }
+    public k getKey() {
+        return key;
+    }
+
+    public void setKey(k key) {
+        this.key = key;
+    }
+
+    public V getValue() {
+        return value;
+    }
+
+    public void setValue(V value) {
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        return "Orderpair{" +
+                "key=" + key +
+                ", value=" + value +
+                '}';
+    }
+}
Index: src/main/java/com/assignment9_set/assignment1/NameComparator.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment1/NameComparator.java b/src/main/java/com/assignment9_set/assignment1/NameComparator.java
new file mode 100644
--- /dev/null	(date 1755631493536)
+++ b/src/main/java/com/assignment9_set/assignment1/NameComparator.java	(date 1755631493536)
@@ -0,0 +1,9 @@
+package com.assignment9_set.assignment1;
+
+public class NameComparator implements java.util.Comparator<Employee> {
+
+    @Override
+    public int compare(Employee e1, Employee e2) {
+        return e1.getName().compareTo(e2.getName());
+    }
+}
Index: src/main/java/com/assignment9_set/assignment4/ParkingSlot.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment4/ParkingSlot.java b/src/main/java/com/assignment9_set/assignment4/ParkingSlot.java
new file mode 100644
--- /dev/null	(date 1755710953160)
+++ b/src/main/java/com/assignment9_set/assignment4/ParkingSlot.java	(date 1755710953160)
@@ -0,0 +1,54 @@
+package com.assignment9_set.assignment4;
+
+import java.util.*;
+
+public class ParkingSlot extends Object implements Comparable<ParkingSlot> {
+    private Integer  slotid;
+    private String location;
+
+    public ParkingSlot(Integer slotid, String location) {
+        this.slotid = slotid;
+        this.location = location;
+    }
+
+    public Integer getSlotid() {
+        return slotid;
+    }
+
+    public void setSlotid(Integer slotid) {
+        this.slotid = slotid;
+    }
+
+    public String getLocation() {
+        return location;
+    }
+
+    public void setLocation(String location) {
+        this.location = location;
+    }
+
+    @Override
+    public String toString() {
+        return "ParkingSlot{" +
+                "slotid=" + slotid +
+                ", location='" + location + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        ParkingSlot that = (ParkingSlot) o;
+        return Objects.equals(slotid, that.slotid) && Objects.equals(location, that.location);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(slotid, location);
+    }
+
+    @Override
+    public int compareTo(ParkingSlot o) {
+        return this.slotid.compareTo(o.slotid);
+    }
+}
Index: src/main/java/com/assignment9_set/assignment4/Vehicle.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment4/Vehicle.java b/src/main/java/com/assignment9_set/assignment4/Vehicle.java
new file mode 100644
--- /dev/null	(date 1755709882910)
+++ b/src/main/java/com/assignment9_set/assignment4/Vehicle.java	(date 1755709882910)
@@ -0,0 +1,65 @@
+package com.assignment9_set.assignment4;
+
+import java.util.*;
+
+public class Vehicle extends Object implements Comparable<Vehicle>  {
+    private String plateNumber;
+    private String ownerName;
+    private String type;
+
+    public Vehicle(String plateNumber, String ownerName, String type) {
+        this.plateNumber = plateNumber;
+        this.ownerName = ownerName;
+        this.type = type;
+    }
+
+    public String getPlateNumber() {
+        return plateNumber;
+    }
+
+    public void setPlateNumber(String plateNumber) {
+        this.plateNumber = plateNumber;
+    }
+
+    public String getOwnerName() {
+        return ownerName;
+    }
+
+    public void setOwnerName(String ownerName) {
+        this.ownerName = ownerName;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    @Override
+    public String toString() {
+        return "Vehicle{" +
+                "plateNumber='" + plateNumber + '\'' +
+                ", ownerName='" + ownerName + '\'' +
+                ", type='" + type + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Vehicle vehicle = (Vehicle) o;
+        return Objects.equals(plateNumber, vehicle.plateNumber) && Objects.equals(ownerName, vehicle.ownerName) && Objects.equals(type, vehicle.type);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(plateNumber, ownerName, type);
+    }
+
+    @Override
+    public int compareTo(Vehicle o) {
+        return this.ownerName.compareTo(o.getOwnerName());
+    }
+}
Index: src/main/java/com/assignment10_functionalinterfaces/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment10_functionalinterfaces/Driver.java b/src/main/java/com/assignment10_functionalinterfaces/Driver.java
new file mode 100644
--- /dev/null	(date 1755716408117)
+++ b/src/main/java/com/assignment10_functionalinterfaces/Driver.java	(date 1755716408117)
@@ -0,0 +1,43 @@
+package com.assignment10_functionalinterfaces;
+
+import java.util.*;
+import java.util.function.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        List<Double> transactions = Arrays.asList(1200.0, 55000.0, 30000.0);
+
+        Predicate<Double> isSuspicious = amount -> amount > 50000.0;
+
+        Consumer<Double> processTransaction = amount ->
+            System.out.println("• Consumer → Prints: \"Processed transaction of ₹" + amount + "\"");
+
+        Supplier<Integer> generateOTP = () -> 1000 + new Random().nextInt(9000);
+
+        Function<Double, Double> deductProcessingFee = amount -> amount - (amount * 0.02);
+
+        BiFunction<Double, Double, Double> applyLoyaltyDiscount = (amount, feePercentage) ->
+            amount - (amount * feePercentage / 100);
+
+        System.out.println("=== Bank Transaction System ===\n");
+
+        for (Double transaction : transactions) {
+            if (isSuspicious.test(transaction)) {
+                System.out.println("• Predicate → Detects ₹" + transaction.intValue() + ",000 as suspicious.");
+            }
+
+            processTransaction.accept(transaction);
+
+            Integer otp = generateOTP.get();
+            System.out.println("• Supplier → Generates OTP: Transaction OTP: " + otp + ".");
+
+            Double afterProcessingFee = deductProcessingFee.apply(transaction);
+            System.out.println("• Function → Deducts processing fee (2%).");
+
+            Double finalAmount = applyLoyaltyDiscount.apply(transaction, 1.5);
+            System.out.println("• BiFunction → Applies discount on processing fee if loyalty points exist. Final amount: ₹" + finalAmount);
+
+            System.out.println();
+        }
+    }
+}
Index: src/main/java/com/oops/day9_collection/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/Driver.java b/src/main/java/com/oops/day9_collection/Driver.java
new file mode 100644
--- /dev/null	(date 1755534399974)
+++ b/src/main/java/com/oops/day9_collection/Driver.java	(date 1755534399974)
@@ -0,0 +1,73 @@
+package com.oops.day9_collection;
+import java.util.*;
+
+
+public class Driver {
+    public static void main(String[] args) {
+       List<String> list1 = new ArrayList<>();
+        list1.add("A");
+        list1.add("B");
+        list1.add("C");
+        list1.add("B");
+        System.out.println(list1);
+        System.out.println("at the index 0 "+list1.get(0));
+        System.out.println("at the index 1 "+list1.get(1));
+
+        list1.add(3,"D");
+        System.out.println(list1);
+        list1.set(0,"E");
+        System.out.println(list1);
+        list1.remove(2);
+        System.out.println(list1);
+        Collections.sort(list1);
+        System.out.println("After sorting "+list1);
+
+        //Create a list of Product objects
+        List<Product> products = new ArrayList<Product>();
+        products.add(new Product(1, "Laptop", 800.00));
+        products.add(new Product(2, "Smartphone", 500.00));
+        products.add(new Product(3, "Tablet", 300.00));
+        products.add(new Product(4, "Desktop", 400.00));
+        //read the lisy of producta
+        System.out.println(products);
+        System.out.println("Product at index 0: " + products.get(0));
+        products.set(1,new Product(100,"mouse",1000.0));
+        System.out.println(products);
+        products.remove(0);
+        System.out.println(products);
+
+        Collections.sort(products);
+        System.out.println("After sorting by ID: " + products);
+       //sort based on product name
+        products.sort(new ProductNameComparator());
+        System.out.println("After sorting by Name: " + products);
+
+        String one="100"; // String literal
+        String two= new String("100");
+        if(one==two) {
+         System.out.println("equal");
+        }
+        else {
+            System.out.println("not equal");
+        }
+        if(one.equals(two)) {
+            System.out.println("equal");
+        }
+        else {
+            System.out.println("not equal");
+        }
+     Product p1= new Product(5001, "product 5001", 800.00);
+        Product p2=p1;
+        Product p3=new Product(5001, "product 5001", 800.00);
+        if(p1.equals(p2)) {
+         System.out.println("equal product");
+        }
+        else {
+            System.out.println("not equal product");
+        }
+        System.out.println("Product lists:"+ products);
+        Product refProduct=new Product(6, "Desktop", 400.0);
+        System.out.println("refProduct:"+products.indexOf(refProduct));
+    }
+
+}
Index: src/main/java/com/oops/day9_collection/Product.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/Product.java b/src/main/java/com/oops/day9_collection/Product.java
new file mode 100644
--- /dev/null	(date 1755531710425)
+++ b/src/main/java/com/oops/day9_collection/Product.java	(date 1755531710425)
@@ -0,0 +1,63 @@
+package com.oops.day9_collection;
+
+import java.util.Objects;
+
+public class Product extends Object implements  Comparable<Product>{
+    private Integer id;
+    private String name;
+    private Double price;
+    public Product(Integer id, String name, Double price) {
+        this.id = id;
+        this.name = name;
+        this.price = price;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price)  {
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Product{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", price=" + price +
+                '}';
+    }
+    @Override
+    public int compareTo(Product p2) {
+        return this.id.compareTo(p2.id);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Product product = (Product) o;
+        return id == product.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(id);
+    }
+}
Index: src/main/java/day12_lambda_stream/Excercise/Employee.java
===================================================================
diff --git a/src/main/java/day12_lambda_stream/Excercise/Employee.java b/src/main/java/day12_lambda_stream/Excercise/Employee.java
new file mode 100644
--- /dev/null	(date 1755759429735)
+++ b/src/main/java/day12_lambda_stream/Excercise/Employee.java	(date 1755759429735)
@@ -0,0 +1,87 @@
+package day12_lambda_stream.Excercise;
+
+import java.util.Objects;
+
+public class Employee extends Object implements Comparable<Employee> {
+    private Integer id;
+    private String name;
+    private String department;
+    private Double salary;
+    private Integer Experience;
+
+    public Employee(Integer id, String name, String department, Double salary, Integer experience) {
+        this.id = id;
+        this.name = name;
+        this.department = department;
+        this.salary = salary;
+        this.Experience = experience;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDepartment() {
+        return department;
+    }
+
+    public void setDepartment(String department) {
+        this.department = department;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    public Integer getExperience() {
+        return Experience;
+    }
+
+    public void setExperience(Integer experience) {
+        Experience = experience;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", department='" + department + '\'' +
+                ", salary=" + salary +
+                ", Experience=" + Experience +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return Objects.equals(id, employee.id) && Objects.equals(name, employee.name) && Objects.equals(department, employee.department) && Objects.equals(salary, employee.salary) && Objects.equals(Experience, employee.Experience);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id, name, department, salary, Experience);
+    }
+
+    @Override
+    public int compareTo(Employee o) {
+        return -(this.salary.compareTo(o.salary));
+    }
+}
Index: src/main/java/day12_lambda_stream/Excercise/Driver.java
===================================================================
diff --git a/src/main/java/day12_lambda_stream/Excercise/Driver.java b/src/main/java/day12_lambda_stream/Excercise/Driver.java
new file mode 100644
--- /dev/null	(date 1755760698182)
+++ b/src/main/java/day12_lambda_stream/Excercise/Driver.java	(date 1755760698182)
@@ -0,0 +1,53 @@
+package day12_lambda_stream.Excercise;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.*;
+import java.util.function.Function;
+import java.util.function.Predicate;
+
+public class Driver {
+    public static void main(String[] args) {
+        List<Employee> employeelist = new ArrayList<>();
+        Employee employee1 = new Employee(1, "aaa", "HR", 50000.0, 5);
+        Employee employee2 = new Employee(2, "bbb", "IT", 60000.0, 3);
+        Employee employee3 = new Employee(3, "ccc", "IT", 40000.0, 11);
+
+
+        employeelist.add((employee1));
+        employeelist.add((employee2));
+        employeelist.add((employee3));
+        System.out.println("Employee Details:"+employeelist);
+        // Filter Employees by Department
+        List<Employee> list1 = new ArrayList<>();
+       employeelist.stream().filter((e) -> e.getDepartment().equals("IT")).forEach((Employee e)-> list1.add(e));
+
+        System.out.println("Employee Details works in it depatment:"+list1);
+        //Find High Earners 50000 and above
+        List<Employee> list2 = new ArrayList<>();
+        employeelist.stream().filter((e) -> e.getSalary()>=50000.0).forEach((Employee e)-> list2.add(e));
+        System.out.println("Employee Details with salary 50000 and above:"+list2);
+        //Sort Employees by Salary
+        Comparator<Employee> SalaryComparator = (Employee e1, Employee e2) -> e1.getSalary().compareTo(e2.getSalary());
+        List<Employee> sortedEmployees = employeelist
+                .stream()
+                .sorted(SalaryComparator)
+                .toList();
+
+        System.out.println("Sorted Employees by Salary:" + sortedEmployees);
+        //Find the Highest Paid Employee
+        Employee highestPaidEmployee = employeelist.stream()
+                .max(SalaryComparator).get();
+
+        System.out.println("Highest Paid Employee: " + highestPaidEmployee);
+        //Check if Any Employee Has More Than 10 Years of Experience
+        Predicate<Employee>  experiencepredicate= (e) -> e.getExperience() >= 10;
+        System.out.println("Any Employee Has More Than 10 Years of Experience " + experiencepredicate.test(employee3));
+        //Count Employees in HR Department
+        long countHR = employeelist.stream()
+                .filter(e -> e.getDepartment().equals("HR"))
+                .count();
+        System.out.println("Count of Employees in HR Department: " + countHR);
+
+    }
+}
Index: src/main/java/com/assignment9_set/assignment2/Product.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment2/Product.java b/src/main/java/com/assignment9_set/assignment2/Product.java
new file mode 100644
--- /dev/null	(date 1755632780388)
+++ b/src/main/java/com/assignment9_set/assignment2/Product.java	(date 1755632780388)
@@ -0,0 +1,63 @@
+package com.assignment9_set.assignment2;
+import java.util.*;
+public class Product extends Object implements Comparable<Product>{
+    private Integer productId;
+    private String name;
+    private Double price;
+    public Product(Integer productId, String name, Double price) {
+        this.productId = productId;
+        this.name = name;
+        this.price = price;
+    }
+
+    public Integer getProductId() {
+        return productId;
+    }
+
+    public void setProductId(Integer productId) {
+        this.productId = productId;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Product{" +
+                "productId=" + productId +
+                ", name='" + name + '\'' +
+                ", price=" + price +
+                '}';
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Product product = (Product) o;
+        return Objects.equals(price, product.price);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(price);
+    }
+
+    @Override
+    public int compareTo(Product o) {
+        return this.price.compareTo(o.price);
+    }
+}
Index: src/main/java/day11_layered_project/WalletController.java
===================================================================
diff --git a/src/main/java/day11_layered_project/WalletController.java b/src/main/java/day11_layered_project/WalletController.java
new file mode 100644
--- /dev/null	(date 1755847301894)
+++ b/src/main/java/day11_layered_project/WalletController.java	(date 1755847301894)
@@ -0,0 +1,108 @@
+package day11_layered_project;
+
+public class WalletController {
+    public static void main(String[] args) {
+        WalletService walletService = new WalletServiceImpl();
+        // add new user
+        Wallet wallet = new Wallet(1, "user1@123", "user1", 500.0, "user1@gmail.com");
+        try {
+            System.out.println(walletService.registerNewuser(wallet));
+
+            System.out.println(walletService.registerNewuser(wallet));
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        try {
+            System.out.println(walletService.getallUser());
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        // add funds
+        try {
+            System.out.println("Current balamnce " + walletService.addfundstowalletbyemail("user1@gmail.com", 200.0));
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        // withdraw funds
+        try {
+            System.out.println("Current balance " + walletService.withdrawfundsfromwalletbyemail("user1@gmail.com", 100.0));
+
+        } catch (WalletWithdrawException e) {
+            System.out.println(e.getMessage());
+        }
+        // transfer funds
+        Wallet wallet2 = new Wallet(2, "user2@123", "user2", 300.0, "user2@gmail.com");
+        try {
+            System.out.println(walletService.registerNewuser(wallet2));
+
+
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        System.out.println("----");
+        try {
+            System.out.println(walletService.getallUser());
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        try {
+            System.out.println("fund transfer status " + walletService.transferfunds("user1@gmail.com", "user2@gmail.com", -5000.0));
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+
+        //get all user
+        try {
+            System.out.println(walletService.getallUser());
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+
+        //user login
+        try {
+            System.out.println(walletService.userlogin("user1@gmail.com","user1@123"));
+
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        //sort wallet by balance
+        try {
+            walletService.sortwalletbybalance();
+
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        //sort by name
+        try {
+            System.out.println(walletService.sortwalletbyname());
+
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        //add zero balance account
+        try {
+            System.out.println("new user added"+walletService.registerNewuser(new Wallet(3,"user3@123","user3",0.0,"user3@gmail.com")));
+            System.out.println("new user added"+walletService.registerNewuser(new Wallet(4,"user4@123","user4",01.0,"user4@gmail.com")));
+
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        try {
+            walletService.displayzerobalanceacoount();
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        //shows accounts between range
+        try {
+            System.out.println("show wallet between 100 to 500"+ walletService.findwalletbetween(100.0,500.0));
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+        //change password
+        try {
+            System.out.println("password change status "+walletService.changepassword("user1@gmail.com","user1@123","user1@456"));
+        } catch (WalletException e) {
+            System.out.println(e.getMessage());
+        }
+    }
+}
Index: src/main/java/day11_layered_project/Wallet.java
===================================================================
diff --git a/src/main/java/day11_layered_project/Wallet.java b/src/main/java/day11_layered_project/Wallet.java
new file mode 100644
--- /dev/null	(date 1755843869237)
+++ b/src/main/java/day11_layered_project/Wallet.java	(date 1755843869237)
@@ -0,0 +1,73 @@
+package day11_layered_project;
+import java.util.*;
+public class Wallet extends Object implements Comparable<Wallet>{  //entit i e we want to persit[save]
+    private Integer id;
+    private String password;
+    private String name;
+    private Double balance;
+    private String email;
+
+    public Wallet(Integer id, String password, String name, Double balance, String email) {
+        this.id = id;
+        this.password = password;
+        this.name = name;
+        this.balance = balance;
+        this.email = email;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getBalance() {
+        return balance;
+    }
+
+    public void setBalance(Double balance) {
+        this.balance = balance;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    @Override
+    public String toString() {
+        return "Wallet{" +
+                "id=" + id +
+                ", password='" + password + '\'' +
+                ", name='" + name + '\'' +
+                ", balance=" + balance +
+                ", email='" + email + '\'' +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Wallet o) {
+        return this.balance.compareTo(o.getBalance());
+    }
+}
Index: src/main/java/day11_layered_project/WalletServiceImpl.java
===================================================================
diff --git a/src/main/java/day11_layered_project/WalletServiceImpl.java b/src/main/java/day11_layered_project/WalletServiceImpl.java
new file mode 100644
--- /dev/null	(date 1755847301874)
+++ b/src/main/java/day11_layered_project/WalletServiceImpl.java	(date 1755847301874)
@@ -0,0 +1,182 @@
+package day11_layered_project;
+
+import java.sql.SQLOutput;
+import java.util.*;
+
+public class WalletServiceImpl implements WalletService{
+    private Map<String,Wallet> userwalletmap = new HashMap<>();
+    @Override
+    public Wallet registerNewuser(Wallet wallet) throws WalletException {
+        //exception handlimng for exsiting user
+        if(this.userwalletmap.containsKey(wallet.getEmail())){
+            throw new WalletException("email id  already exists, please retry with new id");
+        }
+        userwalletmap.put(wallet.getEmail(),wallet);
+        return this.userwalletmap.put(wallet.getEmail(),wallet);
+    }
+
+    @Override
+    public Double addfundstowalletbyemail(String emailid, Double amount) throws WalletException {
+        Wallet wallet = this.userwalletmap.get(emailid);
+        if(amount<=0) {
+            throw new WalletException("amount should be greater than zero");
+        }
+        else{
+            if(this.userwalletmap.containsKey(emailid)){
+
+                wallet.setBalance(wallet.getBalance()+amount);
+
+            }
+            else{
+                throw new WalletException("email id not found");
+            }
+        }
+        return wallet.getBalance();
+    }
+
+    @Override
+    public Double withdrawfundsfromwalletbyemail(String emailid, Double amount) throws WalletWithdrawException  {
+        Wallet wallet = this.userwalletmap.get(emailid);
+        if(amount<=0) {
+            throw new WalletWithdrawException("amount should be greater than zero");
+        }
+        else{
+            if(this.userwalletmap.containsKey(emailid)){
+
+                wallet.setBalance(wallet.getBalance()-amount);
+
+            }
+            else{
+                throw new WalletWithdrawException("email id not found");
+            }
+        }
+        return wallet.getBalance();
+
+    }
+
+    @Override
+    public Boolean transferfunds(String fromemail, String toemail, Double amount) throws WalletException {
+        if(!this.userwalletmap.containsKey(fromemail)){
+            throw new WalletException("From email id not found");
+        }
+        if (!this.userwalletmap.containsKey(toemail)) {
+            throw new WalletException("To email id not found");
+
+        }
+        Wallet fromwallet = this.userwalletmap.get(fromemail);
+        Wallet towallet = this.userwalletmap.get(toemail);
+
+        if(amount<=0) {
+            throw new WalletException("amount should be greater than zero");
+        }
+
+            if(this.userwalletmap.containsKey(fromemail) && this.userwalletmap.containsKey(toemail)){
+                fromwallet.setBalance(fromwallet.getBalance()-amount);
+                towallet.setBalance(towallet.getBalance()+amount);
+            }
+            else{
+                throw new WalletException("email id not found");
+            }
+
+        return true;
+    }
+
+    @Override
+    public Wallet getUserWalletByEmail(String useremail) throws WalletException {
+        Wallet wallet=null ;
+        if(this.userwalletmap.containsKey(useremail)){
+            wallet=this.userwalletmap.get(useremail);
+        }
+        else{
+            throw new WalletException("email id not found");
+        }
+        return wallet;
+    }
+
+    @Override
+    public Collection<Wallet> getallUser() throws WalletException {
+        return this.userwalletmap.values();
+    }
+
+    @Override
+    public Wallet userlogin(String email, String password) throws WalletException {
+        Wallet wallet= this.userwalletmap.get(email);
+        if(!this.userwalletmap.containsKey(email)){
+            throw new WalletException("email id not found");
+        }
+        if(!this.userwalletmap.get(email).getPassword().equals(password)){
+            throw new WalletException("password is incorrect");
+        }
+        if(wallet.getEmail().equals(email) && wallet.getPassword().equals(password)){
+            System.out.println("login successful");
+        }
+        else{
+            throw new WalletException("login failed due to some issue");
+        }
+        return  wallet;
+    }
+
+    @Override
+    public void sortwalletbybalance() throws WalletException {
+        if(this.userwalletmap.isEmpty()){
+            throw new WalletException("No users found to sort");
+        }
+        List<Wallet> walletList = new ArrayList<>(this.userwalletmap.values());
+        Collections.sort(walletList);
+
+        System.out.println("Sorted wallets by balance: " + walletList);
+    }
+
+    @Override
+    public List<Wallet> sortwalletbyname() throws WalletException {
+        if(this.userwalletmap.isEmpty()){
+            throw new WalletException("No users found to sort");
+        }
+        List<Wallet> walletList = new ArrayList<>(this.userwalletmap.values());
+        Collections.sort(walletList,new NameComparator());
+        return walletList;
+    }
+
+    @Override
+    public void displayzerobalanceacoount() throws WalletException {
+        List<Wallet> zerobalancelist = new ArrayList<>(this.userwalletmap.values());
+        System.out.println("zerobalance account list: ");
+        for(Wallet w:zerobalancelist){
+            if(w.getBalance()==0.0){
+                System.out.println(w);
+            }
+        }
+    }
+
+    @Override
+    public boolean changepassword(String email, String oldpassword, String newpassword) throws WalletException {
+        if(!this.userwalletmap.containsKey(email)){
+            throw new WalletException("email id not found");
+        }
+        if(this.userwalletmap.containsKey(email)){
+            Wallet wallet = this.userwalletmap.get(email);
+            if(wallet.getPassword().equals(oldpassword)){
+                wallet.setPassword(newpassword);
+                System.out.println("password changed successfully");
+                return true;
+            }
+            else{
+                throw new WalletException("old password is incorrect");
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public Collection<Wallet> findwalletbetween(Double fromamount, Double toamount) throws WalletException {
+        Collection<Wallet> wallets = this.userwalletmap.values();
+        System.out.println("wallets colllection: " + wallets);
+        if (wallets.isEmpty()) {
+            throw new WalletException("no users found");
+        }
+        Collection<Wallet> wallets1=wallets.stream().filter((Wallet w)-> w.getBalance()>=fromamount && w.getBalance()<=toamount).toList();
+
+        return wallets1;
+    }
+}
Index: src/main/java/day11_layered_project/WalletWithdrawException.java
===================================================================
diff --git a/src/main/java/day11_layered_project/WalletWithdrawException.java b/src/main/java/day11_layered_project/WalletWithdrawException.java
new file mode 100644
--- /dev/null	(date 1755764017118)
+++ b/src/main/java/day11_layered_project/WalletWithdrawException.java	(date 1755764017118)
@@ -0,0 +1,9 @@
+package day11_layered_project;
+
+public class WalletWithdrawException extends Exception {
+    public WalletWithdrawException(String message) {
+        super(message);
+    }
+
+
+}
Index: src/main/java/day11_layered_project/WalletException.java
===================================================================
diff --git a/src/main/java/day11_layered_project/WalletException.java b/src/main/java/day11_layered_project/WalletException.java
new file mode 100644
--- /dev/null	(date 1755763921242)
+++ b/src/main/java/day11_layered_project/WalletException.java	(date 1755763921242)
@@ -0,0 +1,11 @@
+package day11_layered_project;
+
+public class WalletException extends Exception {
+
+
+    public WalletException(String message) {
+        super(message);
+    }
+
+
+}
Index: src/main/java/com/assignment9_set/assignment2/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment2/Driver.java b/src/main/java/com/assignment9_set/assignment2/Driver.java
new file mode 100644
--- /dev/null	(date 1755664572924)
+++ b/src/main/java/com/assignment9_set/assignment2/Driver.java	(date 1755664572924)
@@ -0,0 +1,93 @@
+package com.assignment9_set.assignment2;
+
+import java.util.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        Scanner input = new Scanner(System.in);
+
+        Map<Integer, Product> products = new HashMap<Integer, Product>();
+
+        products.put(1, new Product(1001, "Laptop", 1200.00));
+        products.put(2, new Product(1002, "Smartphone", 800.00));
+        products.put(0, new Product(1003, "Tablet", 600.00));
+
+        System.out.println("All products " + products);
+        System.out.println();
+
+        System.out.println("remove a product " + products.remove(1));
+        System.out.println("All products after removal " + products);
+        System.out.println();
+
+        System.out.println(" Find a product by its ID");
+        System.out.println("enter the product id ");
+        Integer id = input.nextInt();
+        boolean found = false;
+        for (Product p : products.values()) {
+            if (p.getProductId().equals(id)) {
+                System.out.println("Product found: " + p);
+                found = true;
+                break;
+            }
+        }
+        if (!found) {
+            System.out.println("Product not found");
+        }
+
+        System.out.println();
+
+        System.out.println("Enter the product price to show all products cheaper than a given price. ");
+        Double price = input.nextDouble();
+        boolean foundCheaper = false;
+        for (Product p : products.values()) {
+            if( p.getPrice() < price) {
+                System.out.println("Product cheaper than " + price + ": " + p);
+                foundCheaper = true;
+            }
+        }
+        if (!foundCheaper) {
+            System.out.println("No products found cheaper than " + price);
+        }
+       Map<Integer,Product> sortedproducts=new TreeMap<>(products);
+        System.out.println("All products are sorted"+ sortedproducts);
+        System.out.println();
+        List<Product> product1= new ArrayList<>(products.values());
+        Collections.sort(product1,Collections.reverseOrder());
+        System.out.println("All products sorted by price in descending order: " + product1);
+        for (Product p : product1) {
+            for(Map.Entry<Integer,Product> entry: sortedproducts.entrySet()) {
+            if(p.equals(entry.getValue())) {
+            System.out.println("key "+entry.getKey()+" value "+entry.getValue());
+            }
+        }
+        }
+
+        System.out.println();
+        Collections.sort(product1);
+        System.out.println("All products sorted by price in Ascending order: " + product1);
+        for (Product p : product1) {
+            for (Map.Entry<Integer, Product> entry : sortedproducts.entrySet()) {
+                if (p.equals(entry.getValue())) {
+                    System.out.println("key " + entry.getKey() + " value " + entry.getValue());
+                }
+            }
+        }
+        System.out.println();
+        Collections.sort(product1, new ProductNameComparator());
+        System.out.println("All products sorted by name in product name: "+product1);
+        System.out.println("product sorted by product name : ");
+            for (Product p : product1) {
+                for (Map.Entry<Integer, Product> entry : products.entrySet()) {
+                    if (p.equals(entry.getValue())) {
+                        System.out.println(entry);
+                    }
+                }
+            }
+
+
+
+
+    }
+
+
+}
Index: src/main/java/day11_layered_project/WalletService.java
===================================================================
diff --git a/src/main/java/day11_layered_project/WalletService.java b/src/main/java/day11_layered_project/WalletService.java
new file mode 100644
--- /dev/null	(date 1755846840706)
+++ b/src/main/java/day11_layered_project/WalletService.java	(date 1755846840706)
@@ -0,0 +1,20 @@
+package day11_layered_project;
+import java.util.Collection;
+import java.util.List;
+
+public interface WalletService {
+
+    Wallet registerNewuser(Wallet wallet) throws WalletException ;
+   Double  addfundstowalletbyemail(String emailid,Double amount) throws WalletException;
+   Double withdrawfundsfromwalletbyemail(String emailid,Double amount) throws WalletWithdrawException;
+   Boolean transferfunds(String fromemail, String toemail, Double amount) throws  WalletException;
+    Wallet getUserWalletByEmail(String useremail) throws WalletException;
+    Collection<Wallet> getallUser() throws WalletException;
+    Wallet userlogin(String email, String password) throws WalletException;
+    void sortwalletbybalance() throws WalletException;
+
+    List<Wallet> sortwalletbyname() throws WalletException;
+    void displayzerobalanceacoount() throws WalletException;
+    boolean changepassword(String email, String oldpassword, String newpassword) throws WalletException;
+    Collection<Wallet> findwalletbetween(Double fromamount,Double toamount) throws WalletException;
+}
Index: src/main/java/day11_layered_project/NameComparator.java
===================================================================
diff --git a/src/main/java/day11_layered_project/NameComparator.java b/src/main/java/day11_layered_project/NameComparator.java
new file mode 100644
--- /dev/null	(date 1755844899910)
+++ b/src/main/java/day11_layered_project/NameComparator.java	(date 1755844899910)
@@ -0,0 +1,10 @@
+package day11_layered_project;
+
+import java.util.Comparator;
+
+public class NameComparator implements Comparator<Wallet> {
+    @Override
+    public int compare(Wallet w1, Wallet w2) {
+        return w1.getName().compareTo(w2.getName());
+    }
+}
Index: src/main/java/com/oops/day9_collection/ProductNameComparator.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/ProductNameComparator.java b/src/main/java/com/oops/day9_collection/ProductNameComparator.java
new file mode 100644
--- /dev/null	(date 1755501969273)
+++ b/src/main/java/com/oops/day9_collection/ProductNameComparator.java	(date 1755501969273)
@@ -0,0 +1,9 @@
+package com.oops.day9_collection;
+import java.util.*;
+public class ProductNameComparator implements Comparator<Product> {
+    @Override
+    public int compare(Product p1, Product p2) {
+        return p1.getName().compareTo(p2.getName());
+    }
+
+}
Index: src/main/java/com/oops/day9_collection/ProductPriceComparator.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/ProductPriceComparator.java b/src/main/java/com/oops/day9_collection/ProductPriceComparator.java
new file mode 100644
--- /dev/null	(date 1755531710442)
+++ b/src/main/java/com/oops/day9_collection/ProductPriceComparator.java	(date 1755531710442)
@@ -0,0 +1,8 @@
+package com.oops.day9_collection;
+import java.util.*;
+public class ProductPriceComparator implements Comparator<Product> {
+    @Override
+    public int compare(Product p1, Product p2) {
+        return p1.getPrice().compareTo(p2.getPrice());
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment3/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment3/Driver.java b/src/main/java/com/assignment8_collections/assignment3/Driver.java
new file mode 100644
--- /dev/null	(date 1755621716197)
+++ b/src/main/java/com/assignment8_collections/assignment3/Driver.java	(date 1755621716197)
@@ -0,0 +1,91 @@
+package com.assignment8_collections.assignment3;
+
+import java.util.ArrayList;
+import java.util.*;
+public class Driver {
+    public static void main(String[] args) {
+        Scanner input = new Scanner(System.in);
+
+        List<CartItem> cartlist=new ArrayList<>();
+        cartlist.add( new CartItem(4, "banana", 2, 0.5));
+        cartlist.add( new CartItem(2, "Apple", 3, 0.5));
+        cartlist.add(new CartItem(3, "Orange", 1, 0.8));
+        cartlist.add(new CartItem(1, "Watermelon", 2, 0.9));
+        System.out.println("Initial cartlist "+ cartlist);
+        System.out.println();
+        System.out.println("sorting cartlist by item name");
+        Collections.sort(cartlist);
+        System.out.println();
+
+
+        CartItem item1 = new CartItem(2, "Apple", 2, 0.8);
+        System.out.println("updating the quantity of item 2  in the cartlist "+item1);
+        for(CartItem item:cartlist ){
+            if(item.getItemId().equals(item1.getItemId())){
+                item.addquantity(item1.getQuantity());
+                System.out.println("updated item "+item);
+            }
+        }
+        System.out.println("Final cartlist after updating quantity: " + cartlist);
+        System.out.println();
+
+        System.out.println("remove elemnets by item id 3 ");
+
+        for(CartItem item:cartlist ){
+
+            if(item.getItemId().equals(3)){
+                cartlist.remove(item);
+                System.out.println("deleted item "+item);
+            }
+        }
+        System.out.println("Final cartlist after removal quantity: " + cartlist);
+        System.out.println();
+
+        System.out.println("Update quantity by item id ");
+        System.out.println("enter the item id to update quantity");
+        Integer itemid = input.nextInt();
+        System.out.println("enter the quantity to update");
+        Integer quantity = input.nextInt();
+
+        for(CartItem item:cartlist ){
+            if(item.getItemId().equals(itemid)){
+                item.updateQuantity(itemid, quantity);
+                System.out.println("updated item "+item);
+            }
+        }
+        System.out.println("Final cartlist after update quantity: " + cartlist);
+        System.out.println();
+
+        System.out.println("enter the item id to find the item");
+        Integer findItemId = input.nextInt();
+        boolean found = false;
+        for(CartItem item:cartlist ){
+            if(item.getItemId().equals(findItemId)) {
+                System.out.println("item found " + item);
+                found=true;
+            }
+        }
+        if(!found) {
+            System.out.println("item not found with id " + findItemId);
+        }
+        System.out.println();
+
+        List<CartItem> cartlist1=new ArrayList<>();
+        cartlist1.add(new CartItem(10,"grapes", 2, 50.0));
+        cartlist1.add(new CartItem(11,"pipeapple", 3, 25.0));
+
+        System.out.println("calculate total bill amount for cartlist1 "+ cartlist1);
+        Double totalBill = 0.0;
+        for(CartItem item:cartlist1 ){
+            Double total = item.getTotalBill();
+            totalBill = totalBill + total;
+
+        }
+        System.out.println("Total bill  for item in tha cart "  + totalBill);
+
+
+
+
+
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment3/CartItem.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment3/CartItem.java b/src/main/java/com/assignment8_collections/assignment3/CartItem.java
new file mode 100644
--- /dev/null	(date 1755621726025)
+++ b/src/main/java/com/assignment8_collections/assignment3/CartItem.java	(date 1755621726025)
@@ -0,0 +1,83 @@
+package com.assignment8_collections.assignment3;
+import java.util.*;
+public class CartItem extends Object implements Comparable<CartItem>{
+    private Integer itemId;
+    private String itemName;
+    private Integer quantity;;
+    private Double pricePerUnit;
+
+    public CartItem(Integer itemId, String itemName, Integer quantity, Double pricePerUnit) {
+        this.itemId = itemId;
+        this.itemName = itemName;
+        this.quantity = quantity;
+        this.pricePerUnit = pricePerUnit;
+    }
+
+    public Integer getItemId() {
+        return itemId;
+    }
+
+    public void setItemId(Integer itemId) {
+        this.itemId = itemId;
+    }
+
+    public String getItemName() {
+        return itemName;
+    }
+
+    public void setItemName(String itemName) {
+        this.itemName = itemName;
+    }
+
+    public Integer getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(Integer quantity) {
+        this.quantity = quantity;
+    }
+
+    public Double getPricePerUnit() {
+        return pricePerUnit;
+    }
+
+    public void setPricePerUnit(Double pricePerUnit) {
+        this.pricePerUnit = pricePerUnit;
+    }
+    public void addquantity(Integer quantity){
+        this.quantity += quantity;
+    }
+    public void updateQuantity(Integer itemId, Integer quantity) {
+
+            this.quantity = quantity;
+    }
+    public Double  getTotalBill() {
+        return this.getQuantity() * this.getPricePerUnit();
+    }
+    @Override
+    public String toString() {
+        return "CartItem{" +
+                "itemId=" + itemId +
+                ", itemName='" + itemName + '\'' +
+                ", quantity=" + quantity +
+                ", pricePerUnit=" + pricePerUnit +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        CartItem cartItem = (CartItem) o;
+        return Objects.equals(itemId, cartItem.itemId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(itemId);
+    }
+
+    @Override
+    public int compareTo(CartItem o) {
+        return this.itemId.compareTo(o.itemId);
+    }
+}
Index: src/main/java/com/oops/day10_set/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Driver.java b/src/main/java/com/oops/day10_set/Driver.java
new file mode 100644
--- /dev/null	(date 1755587673783)
+++ b/src/main/java/com/oops/day10_set/Driver.java	(date 1755587673783)
@@ -0,0 +1,106 @@
+package com.oops.day10_set;
+import java.util.*;
+public class Driver {
+    public static void main(String[] args) {
+        Set<Integer> set1 = new HashSet<Integer>();
+        set1.add(10);
+        set1.add(20);
+        set1.add(30);
+        set1.add(40);
+        System.out.println("Set elements: " + set1);
+        System.out.println("insert 10: " + set1.add(10));
+
+        for (Integer element : set1) {
+            System.out.println("Element: " + element);
+        }
+        System.out.println("contain 30 or not :" + set1.contains(30));
+        System.out.println("remove 40 : " + set1.remove(40));
+        System.out.println("Set elements: " + set1);
+        System.out.println("Size of set: " + set1.size());
+        System.out.println("Is set empty? " + set1.isEmpty());
+        set1.clear();
+        System.out.println("Set elements after clear: " + set1);
+
+        //try with String data
+        Set<String> set2 = new HashSet<String>();
+        set2.add("Hello");
+        set2.add("World");
+        set2.add("Java");
+        System.out.println("Set elements: " + set2);
+
+        Set<Employee> set3 = new HashSet<Employee>();
+        set3.add(new Employee(5, "aaa", 50000));
+        set3.add(new Employee(2, "bbb", 60000));
+        set3.add(new Employee(3, "ccc", 70000));
+
+        Employee duplicateemployee = new Employee(4, "ddd", 50000);
+        set3.add(duplicateemployee);
+        System.out.println(set3);
+        set3.add(duplicateemployee);
+        System.out.println("Set elements after adding duplicate employee: " + set3);
+        set3.add(new Employee(2, "bbb", 60000));
+        System.out.println(set3);
+
+        for (Employee e : set3) {
+            System.out.println("Employee: " + e);
+            System.out.println("Employee ID: " + e.getId());
+        }
+        for (Employee e : set3) {
+            if (e.getId().equals(2)) {
+
+                 e.setSalary(e.getSalary() +1000);
+                System.out.println("Updated Employee: " + e);
+            }
+
+        }
+        List<Employee> list=new ArrayList<Employee>(set3);
+        Collections.sort(list);
+        System.out.println("Sorted Employee List: " + list);
+
+        HashSet<Employee>  setobject=(HashSet<Employee>) set3;
+        System.out.println("Set object: " + setobject);
+        Set<Integer> orderSet =new LinkedHashSet<>();
+        orderSet.add(40);
+        orderSet.add(10);
+        orderSet.add(20);
+        orderSet.add(30);
+        System.out.println("LinkedHashSet elements: " + orderSet);
+
+        Set<Integer> evenset = new HashSet<>();
+        evenset.add(2);
+        evenset.add(4);
+        evenset.add(6);
+        Set<Integer> oddset=new HashSet<>();
+        oddset.add(1);
+        oddset.add(3);
+        oddset.add(5);
+        oddset.add(6);
+        System.out.println("Even set: " + evenset);
+        System.out.println("Odd set: " + oddset);
+       evenset.removeAll(oddset);
+        oddset.removeAll(evenset);
+        System.out.println( evenset);
+        System.out.println( oddset);
+        System.out.println("Contains all "+evenset.containsAll(oddset));
+        evenset.add(6);
+        System.out.println("Odd set" +oddset);
+        System.out.println("even set"+evenset);
+        evenset.retainAll(oddset);
+
+        System.out.println("after using retainAll() "+evenset);
+         evenset.add(4);
+        evenset.add(2);
+
+        System.out.println("Odd set" +oddset);
+        System.out.println("even set"+evenset);
+        evenset.addAll(oddset);
+        System.out.println("after using addAll() " + evenset);
+
+        Set<Employee> sortedset=new TreeSet<>(set3);
+        System.out.println("Sorted Employee Set: " + sortedset);
+        set3.add(new Employee(1,"eee",40000));
+        System.out.println("Set after adding new employee: " + set3);
+
+
+    }
+}
Index: src/main/java/com/oops/day9_collection/Excercise/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/Excercise/Driver.java b/src/main/java/com/oops/day9_collection/Excercise/Driver.java
new file mode 100644
--- /dev/null	(date 1755505782839)
+++ b/src/main/java/com/oops/day9_collection/Excercise/Driver.java	(date 1755505782839)
@@ -0,0 +1,18 @@
+package com.oops.day9_collection.Excercise;
+
+import java.util.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        List<Employee> employeelist=new ArrayList<Employee>();
+        employeelist.add(new Employee(1,"aaa",50000));
+        employeelist.add(new Employee(2,"bbb",60000));
+        employeelist.add(new Employee(3,"ccc",70000));
+        System.out.println("employeeList"+ employeelist);
+        System.out.println("Employee at index 0: " + employeelist.get(0));
+        employeelist.set(1,new Employee(100,"ddd",80000));
+        System.out.println("After updating index 1: " + employeelist);
+        employeelist.remove(0);
+        System.out.println("After removing index 0: " + employeelist);
+    }
+}
Index: src/main/java/com/oops/day9_collection/Excercise/Employee.java
===================================================================
diff --git a/src/main/java/com/oops/day9_collection/Excercise/Employee.java b/src/main/java/com/oops/day9_collection/Excercise/Employee.java
new file mode 100644
--- /dev/null	(date 1755505682782)
+++ b/src/main/java/com/oops/day9_collection/Excercise/Employee.java	(date 1755505682782)
@@ -0,0 +1,45 @@
+package com.oops.day9_collection.Excercise;
+
+public class Employee {
+    private int id;
+    private String name;
+    private double salary;
+    public Employee(int id, String name, double salary) {
+        this.id = id;
+        this.name = name;
+        this.salary = salary;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(double salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+}
Index: src/main/java/com/oops/day10_set/Employee.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Employee.java b/src/main/java/com/oops/day10_set/Employee.java
new file mode 100644
--- /dev/null	(date 1755587631606)
+++ b/src/main/java/com/oops/day10_set/Employee.java	(date 1755587631606)
@@ -0,0 +1,65 @@
+package com.oops.day10_set;
+
+import java.util.Objects;
+
+public class Employee extends Object implements Comparable<Employee> {
+    private Integer id;
+    private String name;
+    private Double salary;
+
+    public Employee(int id, String name, double salary) {
+        this.id = id;
+        this.name = name;
+        this.salary = salary;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return id == employee.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(id);
+    }
+
+    @Override
+    public int compareTo(Employee o) {
+        return this.id.compareTo(o.id);
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment/Employee.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment/Employee.java b/src/main/java/com/assignment8_collections/assignment/Employee.java
new file mode 100644
--- /dev/null	(date 1755542974570)
+++ b/src/main/java/com/assignment8_collections/assignment/Employee.java	(date 1755542974570)
@@ -0,0 +1,74 @@
+package com.assignment8_collections.assignment;
+import java.util.*;
+public class Employee extends  Object implements Comparable<Employee> {
+    private Integer id;
+    private String name;
+    private String department;
+    private Double salary;
+
+    public Employee(Integer id, String name, String department, Double salary) {
+        this.id = id;
+        this.name = name;
+        this.department = department;
+        this.salary = salary;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDepartment() {
+        return department;
+    }
+
+    public void setDepartment(String department) {
+        this.department = department;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", department='" + department + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+
+    @Override   //contains and indexOf
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return Objects.equals(id, employee.id) &&  Objects.equals(department, employee.department) && Objects.equals(salary, employee.salary);
+    }
+
+    @Override  // obj.equals(obj2)
+    public int hashCode() {
+        return Objects.hash(id);
+    }
+
+    @Override  // Collections.sort(list)
+   public int compareTo(Employee o) {
+       return this.id.compareTo(o.id);
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment/Driver.java b/src/main/java/com/assignment8_collections/assignment/Driver.java
new file mode 100644
--- /dev/null	(date 1755541142472)
+++ b/src/main/java/com/assignment8_collections/assignment/Driver.java	(date 1755541142472)
@@ -0,0 +1,66 @@
+package com.assignment8_collections.assignment;
+import java.util.*;
+public class Driver {
+
+
+    public static void main(String[] args) {
+        Scanner input=new Scanner(System.in);
+
+        List<Employee> employeelist=new ArrayList<Employee>();
+        employeelist.add(new Employee(3,"aaa","IT",50000.0));
+        employeelist.add(new Employee(2,"bbb","HR",60000.0));
+        employeelist.add(new Employee(4,"ccc","Finance",70000.0));
+        System.out.println("employee list");
+        System.out.println(employeelist);
+        System.out.println("Sorting employee list by id");
+        Collections.sort(employeelist);
+        System.out.println(employeelist);
+        String choice="";
+        while(true) {
+            System.out.println("enter choice 1)update  2)delete 3)exit");
+            choice=input.nextLine();
+            if(choice.equals("update")) {
+                System.out.println("enter id to update");
+                Integer id=input.nextInt();
+               input.nextLine(); // consume the newline character
+                for(Employee e:employeelist) {
+                    if(e.getId().equals(id)) {
+                        System.out.println("enter new name");
+                        String name=input.nextLine();
+
+                        e.setName(name);
+                        System.out.println("enter new department");
+                        String department=input.nextLine();
+                        e.setDepartment(department);
+                        System.out.println("enter new salary");
+                        Double salary=input.nextDouble();
+                        e.setSalary(salary);
+                        System.out.println("Employee updated: " + e);
+                    }
+                }
+            } else if(choice.equals("delete")) {
+                System.out.println("enter id to delete");
+                Integer id=input.nextInt();
+                for(Employee e:employeelist) {
+                    if(e.getId().equals(id)) {
+                        System.out.println("Employee found: " + e);
+                        employeelist.remove(e);
+
+                    }
+                }
+                System.out.println("Employee with id " + id + " deleted.");
+            } else if(choice.equals("exit")) {
+                break;
+            } else {
+                System.out.println("Invalid choice, please try again.");
+
+            }
+           System.out.println(employeelist);
+
+        }
+        Collections.sort(employeelist);
+        Employee e1= new Employee(3,"aba","IT",50000.0);
+        System.out.println("employee id 3 exists "+ employeelist.indexOf(e1));
+        System.out.println("employee id 3 exists "+ employeelist.contains(e1));
+    }
+}
Index: src/main/java/com/oops/day10_set/Excercise1/Employee.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Excercise1/Employee.java b/src/main/java/com/oops/day10_set/Excercise1/Employee.java
new file mode 100644
--- /dev/null	(date 1755585085132)
+++ b/src/main/java/com/oops/day10_set/Excercise1/Employee.java	(date 1755585085132)
@@ -0,0 +1,35 @@
+package com.oops.day10_set.Excercise1;
+
+public class Employee {
+    private Integer id;
+    private String email;
+
+    public Employee(Integer id, String email) {
+        this.id = id;
+        this.email = email;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", email='" + email + '\'' +
+                '}';
+    }
+}
Index: src/main/java/com/assignment9_set/assignment3/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment3/Driver.java b/src/main/java/com/assignment9_set/assignment3/Driver.java
new file mode 100644
--- /dev/null	(date 1755709013747)
+++ b/src/main/java/com/assignment9_set/assignment3/Driver.java	(date 1755709013747)
@@ -0,0 +1,66 @@
+package com.assignment9_set.assignment3;
+
+import java.util.*;
+
+public class Driver {
+    public static void main(String[] args) {
+        Set<Course> courses = new HashSet<>();
+        courses.add(new Course(1, "Java"));
+        courses.add(new Course(2, "Python"));
+        courses.add(new Course(3, "C"));
+        courses.add(new Course(1, "Java"));
+
+        System.out.println("displaying courses withoput duplicate" + courses);
+
+        Map<Student, Set<Course>> map = new HashMap<>();
+        map.put(new Student(1001, "aaa"), courses);
+        map.put(new Student(1002, "ddd"), courses);
+        map.put(new Student(1003, "ccc"), courses);
+
+        System.out.println("student registration detials" + map);
+        System.out.println();
+        Student student = new Student(1001, "aaa");
+        Set<Course> course1 = new HashSet<>(map.get(student));
+        course1.add(new Course(4, "Angular"));
+        System.out.println("student registration detials for student ID 1001" + map.get(student));
+        System.out.println("adding one course  for student ID 1001 " + map.replace(student, course1));
+
+        System.out.println("student registration detials for student ID 1001 " + map.get(student));
+        System.out.println();
+        Course Courseremove = new Course(1, "Java");
+        course1.remove(Courseremove);
+        map.replace(student, course1);
+
+        System.out.println("student registration detials after removing one course for student ID 1001" + map.get(student));
+
+
+        System.out.println();
+        System.out.println("displaying all students with their courses " + map);
+        System.out.println();
+        Student student1 = new Student(1002, "bbb");
+        System.out.println(" Remove a student from the system" + map.remove(student1));
+        System.out.println("displaying all students with their courses after removing student ID 1001 " + map);
+        System.out.println();
+
+        Set<Course> allcourse = new HashSet<>();
+        for (Map.Entry<Student, Set<Course>> entry : map.entrySet()) {
+            Set<Course> coursesSet = entry.getValue();
+            allcourse.addAll(coursesSet);
+        }
+        System.out.println(" Display all courses before  sorted by courseName. " + allcourse);
+        List<Course> courseList = new ArrayList<>(allcourse);
+        Collections.sort(courseList);
+        System.out.println(" Display all courses after sorted by courseName. " + courseList);
+        System.out.println();
+
+        List<Student> studentList1 = new ArrayList<>(map.keySet());
+        System.out.println(" Display all student before  sorted by student name. " + studentList1);
+        Collections.sort(studentList1);
+        System.out.println(" Display all student after   sorted by student name. " + studentList1);
+
+        System.out.println(" Display all courses sorted by courseName. " + map);
+
+    }
+
+
+}
Index: src/main/java/com/assignment9_set/assignment2/ProductNameComparator.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment2/ProductNameComparator.java b/src/main/java/com/assignment9_set/assignment2/ProductNameComparator.java
new file mode 100644
--- /dev/null	(date 1755663615585)
+++ b/src/main/java/com/assignment9_set/assignment2/ProductNameComparator.java	(date 1755663615585)
@@ -0,0 +1,10 @@
+package com.assignment9_set.assignment2;
+
+import java.util.Comparator;
+
+public class ProductNameComparator implements Comparator<Product> {
+    @Override
+    public int compare(Product p1, Product p2) {
+        return p1.getName().compareTo(p2.getName());
+    }
+}
Index: src/main/java/com/oops/day10_set/Excercise1/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Excercise1/Driver.java b/src/main/java/com/oops/day10_set/Excercise1/Driver.java
new file mode 100644
--- /dev/null	(date 1755587608628)
+++ b/src/main/java/com/oops/day10_set/Excercise1/Driver.java	(date 1755587608628)
@@ -0,0 +1,18 @@
+package com.oops.day10_set.Excercise1;
+import java.util.*;
+public class Driver {
+    public static void main(String[] args) {
+        // Create a set of Employee objects
+        Set<Employee> employeeSet = new HashSet<>();
+
+
+        employeeSet.add(new Employee(1, "aaa@gmail.com"));
+        employeeSet.add(new Employee(2, "ddd@gmail.com"));
+        employeeSet.add(new Employee(3, "ccc@gmail.com"));
+
+
+        System.out.println("Employee Set: " + employeeSet);
+
+
+    }
+}
Index: src/main/java/com/assignment9_set/assignment3/Course.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment3/Course.java b/src/main/java/com/assignment9_set/assignment3/Course.java
new file mode 100644
--- /dev/null	(date 1755708416260)
+++ b/src/main/java/com/assignment9_set/assignment3/Course.java	(date 1755708416260)
@@ -0,0 +1,54 @@
+package com.assignment9_set.assignment3;
+
+import java.util.Objects;
+
+public class Course implements Comparable<Course>{
+    private Integer  courseId;
+    private String CourseName;
+
+    public Course(Integer courseId, String courseName) {
+        this.courseId = courseId;
+        CourseName = courseName;
+    }
+
+    public int getCourseId() {
+        return courseId;
+    }
+
+    public void setCourseId(int courseId) {
+        this.courseId = courseId;
+    }
+
+    public String getCourseName() {
+        return CourseName;
+    }
+
+    public void setCourseName(String courseName) {
+        CourseName = courseName;
+    }
+
+    @Override
+    public String toString() {
+        return "Course{" +
+                "courseId=" + courseId +
+                ", CourseName='" + CourseName + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Course course = (Course) o;
+        return Objects.equals(CourseName, course.CourseName);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(CourseName);
+    }
+
+    @Override
+    public int compareTo(Course o) {
+        return this.CourseName.compareTo(o.CourseName);
+    }
+}
Index: src/main/java/com/assignment9_set/assignment4/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment9_set/assignment4/Driver.java b/src/main/java/com/assignment9_set/assignment4/Driver.java
new file mode 100644
--- /dev/null	(date 1755713561580)
+++ b/src/main/java/com/assignment9_set/assignment4/Driver.java	(date 1755713561580)
@@ -0,0 +1,56 @@
+package com.assignment9_set.assignment4;
+
+
+import java.util.*;
+public class Driver {
+        public static void main(String[] args) {
+            Set<Vehicle> vehicles = new HashSet<>();
+            Vehicle vehicles1=(new Vehicle("1001","ddd", "SUV"));
+            Vehicle vehicles2=(new Vehicle("1002","aaa", "SUV"));
+            Vehicle vehicles3=(new Vehicle("1003","ccc", "Bike"));
+            Vehicle vehicles4=(new Vehicle("1001","ddd", "SUV"));
+
+            vehicles.add(vehicles1);
+            vehicles.add(vehicles2);
+            vehicles.add(vehicles3);
+            vehicles.add(vehicles4);
+            System.out.println("displaying vehicles  without duplicate" + vehicles);
+
+            Map<ParkingSlot, Vehicle> map = new HashMap<>();
+            map.put(new ParkingSlot(5003, "xxx"), vehicles1);
+            map.put(new ParkingSlot(5002, "yyy"), vehicles2);
+            map.put(new ParkingSlot(5001, "zzz"), vehicles3);
+            System.out.println("student registration detials" + map);
+            System.out.println();
+
+            ParkingSlot parkingSlot1 = new ParkingSlot(5002, "yyy");
+            Vehicle updatevehicle = new Vehicle("1010", "ttt", "SUV");
+            System.out.println("before updating vehicle details update for slot yyy " + map.get(parkingSlot1));
+            map.replace(parkingSlot1,updatevehicle );
+            System.out.println("after updating vehicle details update for slot yyy " + map.get(parkingSlot1));
+            System.out.println();
+            System.out.println("View all occupied slots." );
+            System.out.println( map.keySet());
+            System.out.println();
+
+            List<Vehicle> vehiclelist = new ArrayList<>(map.values());
+            System.out.println("Display all vehicles before sorted by ownerName. " + vehiclelist);
+            Collections.sort(vehiclelist);
+            System.out.println("Display all vehicles after sorted by ownerName. " + vehiclelist);
+
+
+
+
+            List<ParkingSlot> slotlist = new ArrayList<>(map.keySet());
+            System.out.println(" Display all slots before  sorted by slotId. " + slotlist);
+            Collections.sort(slotlist);
+            System.out.println(" Display all slots after   sorted by slotId. " + slotlist);
+
+           
+
+        }
+
+
+    }
+
+
Index: src/main/java/com/oops/day10_set/Excercise2/Student.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Excercise2/Student.java b/src/main/java/com/oops/day10_set/Excercise2/Student.java
new file mode 100644
--- /dev/null	(date 1755589414945)
+++ b/src/main/java/com/oops/day10_set/Excercise2/Student.java	(date 1755589414945)
@@ -0,0 +1,55 @@
+package com.oops.day10_set.Excercise2;
+
+import java.util.*;
+
+public class Student extends Object implements Comparable<Student> {
+    private Integer id;
+    private String name;
+
+
+    public Student(Integer id,String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public String toString() {
+        return "Student{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Student student = (Student) o;
+        return Objects.equals(id, student.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(id);
+    }
+
+    @Override
+    public int compareTo(Student o) {
+        return this.id.compareTo(o.id);
+    }
+}
Index: src/main/java/day10_streams/demo.java
===================================================================
diff --git a/src/main/java/day10_streams/demo.java b/src/main/java/day10_streams/demo.java
new file mode 100644
--- /dev/null	(date 1755667860465)
+++ b/src/main/java/day10_streams/demo.java	(date 1755667860465)
@@ -0,0 +1,11 @@
+package day10_streams;
+
+public class demo implements Demofunction {
+
+    @Override
+    public void display() {
+        System.out.println("ford india");
+    }
+
+
+}
Index: src/main/java/com/oops/day10_set/Excercise2/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Excercise2/Driver.java b/src/main/java/com/oops/day10_set/Excercise2/Driver.java
new file mode 100644
--- /dev/null	(date 1755589823905)
+++ b/src/main/java/com/oops/day10_set/Excercise2/Driver.java	(date 1755589823905)
@@ -0,0 +1,26 @@
+package com.oops.day10_set.Excercise2;
+import java.util.*;
+public class Driver {
+    public static void main( String[] args ) {
+        HashSet<Student> studentset=new HashSet<Student>();
+        studentset.add(new Student(101, "Raj"));
+        studentset.add(new Student(101, "Raj"));
+        studentset.add(new Student(103, "Amit"));
+        studentset.add(new Student(102, "Priya"));
+        studentset.add( new Student(104, "Zara"));
+
+            System.out.println("Student set :"+studentset);
+
+            Set<Student> orderset= new LinkedHashSet<Student>(studentset);
+            System.out.println("Linkedhash set Ordered set before :"+orderset);
+            orderset.add(new Student(100,"charan"));
+            System.out.println("Linkedhash set Ordered set after insert  :"+orderset);
+
+            Set<Student> treeset=new TreeSet<>(orderset);
+           System.out.println("Tree set Ordered set :"+treeset);
+
+//        System.out.printDoes HashSet contain Student(103, "Amit")? true
+//        Does LinkedHashSet contain Student(103, "Amit")? true
+//        Does TreeSet contain Student(103, "Amit")? true
+    }
+}
Index: src/main/java/day10_streams/Demofunction.java
===================================================================
diff --git a/src/main/java/day10_streams/Demofunction.java b/src/main/java/day10_streams/Demofunction.java
new file mode 100644
--- /dev/null	(date 1755667860425)
+++ b/src/main/java/day10_streams/Demofunction.java	(date 1755667860425)
@@ -0,0 +1,6 @@
+package day10_streams;
+@FunctionalInterface
+public interface Demofunction {
+    void display();
+
+}
Index: src/main/java/day10_streams/LambdaDriver.java
===================================================================
diff --git a/src/main/java/day10_streams/LambdaDriver.java b/src/main/java/day10_streams/LambdaDriver.java
new file mode 100644
--- /dev/null	(date 1755671332883)
+++ b/src/main/java/day10_streams/LambdaDriver.java	(date 1755671332883)
@@ -0,0 +1,29 @@
+package day10_streams;
+import java.util.function.*;
+public class LambdaDriver {
+    public static void main(String[] args) {
+        Demofunction demo= new demo();
+        demo.display();
+
+        Demofunction function= ()->System.out.println("ford india using lambda expression");
+        function.display();
+
+        Consumer<Integer> consumer = (Integer data) -> System.out.println("Consumer: " + data);
+        consumer.accept(100);
+
+        Supplier<Double> supplier= ()->3.14;
+        System.out.println("Supplier: " + supplier.get());
+
+        Predicate<Integer> predicate= (Integer data) -> data%2==0;
+        System.out.println("Predicate: " + predicate.test(10));
+        System.out.println("Predicate: " + predicate.test(11));
+
+        Function<String, Integer> function1= (String data) -> data.length();
+        System.out.println("Function: " + function1.apply("Hello World"));
+        BiFunction<Integer,Integer,Integer> biFunction= (Integer a,Integer b)->a+b;
+        System.out.println("BiFunction: " + biFunction.apply(10, 20));
+
+
+
+    }
+}
Index: src/main/java/day12_lambda_stream/Employee.java
===================================================================
diff --git a/src/main/java/day12_lambda_stream/Employee.java b/src/main/java/day12_lambda_stream/Employee.java
new file mode 100644
--- /dev/null	(date 1755757139469)
+++ b/src/main/java/day12_lambda_stream/Employee.java	(date 1755757139469)
@@ -0,0 +1,67 @@
+package day12_lambda_stream;
+import java.util.Objects;
+
+public class Employee implements Comparable<Employee> { // POJO
+    private Integer id;
+    private String name;
+    private Double salary;
+
+    public Employee() {
+    }
+
+    public Employee(Integer id, String name, Double salary) {
+        this.id = id;
+        this.name = name;
+        this.salary = salary;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getSalary() {
+        return salary;
+    }
+
+    public void setSalary(Double salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Employee employee = (Employee) o;
+        return Objects.equals(id, employee.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(id);
+    }
+
+    @Override
+    public int compareTo(Employee e2) {
+        return this.id.compareTo(e2.getId());
+    }
+}
\ No newline at end of file
Index: src/main/java/day12_lambda_stream/Driver.java
===================================================================
diff --git a/src/main/java/day12_lambda_stream/Driver.java b/src/main/java/day12_lambda_stream/Driver.java
new file mode 100644
--- /dev/null	(date 1755757743937)
+++ b/src/main/java/day12_lambda_stream/Driver.java	(date 1755757743937)
@@ -0,0 +1,98 @@
+package day12_lambda_stream;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
+import java.util.function.Predicate;
+import java.util.function.Function;
+import java.util.List;
+
+public class Driver {
+    public static void main(String[] args) {
+        Consumer<Employee> employeeConsumer = (Employee e) -> System.out.println(e);
+        Employee employee = new Employee(1001, "aaa", 5000.0);
+        employeeConsumer.accept(employee);
+
+        Supplier<Employee> employeeSupplier = () -> new Employee(1002, "bbb", 6000.0);
+        Employee newEmployee = employeeSupplier.get();
+        System.out.println(newEmployee);
+
+        Predicate<Employee> employeePredicate = (Employee e) -> e.getId() == 1001;
+        boolean isId1001 = employeePredicate.test(employee);
+        System.out.println("Is employee ID 1001? " + isId1001);
+
+        Function<Employee, Employee> employeeFunction = (Employee e) -> {
+            Double salary = e.getSalary() * 1.1; // Increase salary by 10%
+            e.setSalary(e.getSalary() * 1.1);
+            return e;
+        };
+        Employee employee1 = employeeFunction.apply(employee);
+        System.out.println("Updated Salary: " + employee1);
+        Employee employeeobj = (new Employee(7, "chennai", 70000.0));
+        System.out.println("employee details of id  7 " + employeeFunction.apply(employeeobj));
+        System.out.println("employee details of id  7 " + employeeobj);
+        // pass lambda to function as parameter
+        display(employeeSupplier);
+        processEmployeeSalary(employeeFunction);
+        System.out.println(employee);
+        System.out.println(employeeobj);
+
+        List<Employee> employeelist = new ArrayList<>();
+        employeelist.add(new Employee(1, "dda", 46000.0));
+        employeelist.add(new Employee(2, "bbb", 60000.0));
+        employeelist.add(new Employee(3, "ccc", 30000.0));
+//display emp more than 60000
+        employeelist.stream().filter((Employee e) -> e.getSalary() > 60000.0).
+                forEach((e) -> System.out.println(e));
+
+        Long count = employeelist.stream().filter((Employee e) -> e.getSalary() > 60000.0).count();
+        System.out.println("Count of employees with salary > 60000: " + count);
+        //sort by emp name
+        Comparator<Employee> EmployeenameComparator = (Employee e1, Employee e2) -> e1.getName().compareTo(e2.getName());
+        List<Employee> sortedEmployees = employeelist
+                .stream()
+                .sorted(EmployeenameComparator)
+                .toList();
+        System.out.println("Sorted emp by name:" + sortedEmployees);
+        System.out.println("After sorting emp collection remains same:" + employeelist);
+        System.out.println();
+        List<Employee> employeelistwithhike = employeelist
+                .stream()
+                .map((Employee e) ->
+                {
+                    //e.setSalary(e.getSalary()*1.05);
+                    Double salary = e.getSalary() * 1.1;
+                    //e.setSalary(salary);
+                    return new Employee(e.getId(), e.getName(), salary);
+                }).sorted().toList();
+        Double totalsalary = employeelistwithhike
+                .stream()
+                .mapToDouble((e)->e.getSalary())
+                .sum();
+        System.out.println("Total salary of employees with hike: " + totalsalary);
+        totalsalary = employeelist
+                .stream()
+                .mapToDouble((Employee e) ->
+                {
+                    //e.setSalary(e.getSalary()*1.05);
+                    Double salary = e.getSalary() * 1.1;
+                    //e.setSalary(salary);
+                    return salary;
+                }).sum();
+        System.out.println("Total salary of employees with hike: " + totalsalary);
+        System.out.println("Employees list  with salary hike: " + employeelistwithhike);
+        System.out.println("Original list" + employeelist);
+
+    }
+
+
+    static void display(Supplier<Employee> employeeSupplier) {
+        System.out.println(employeeSupplier.get());
+    }
+
+    static void processEmployeeSalary(Function<Employee, Employee> employeeFunction) {
+        System.out.println(employeeFunction.apply(new Employee(7, "chennai", 70000.0)));
+    }
+}
+
Index: src/main/java/com/oops/day9_generic/DriverGenerics.java
===================================================================
diff --git a/src/main/java/com/oops/day9_generic/DriverGenerics.java b/src/main/java/com/oops/day9_generic/DriverGenerics.java
new file mode 100644
--- /dev/null	(date 1755495971569)
+++ b/src/main/java/com/oops/day9_generic/DriverGenerics.java	(date 1755495971569)
@@ -0,0 +1,38 @@
+package com.oops.day9_generic;
+
+public class DriverGenerics {
+    public static void main(String[] args) {
+
+       /* Calculator<Integer> calculator = new Calculator(10,20);
+        System.out.println("Operand 1 ="+(calculator.getOperandOne()));
+
+        Calculator<Double> calculator2 = new Calculator(10.2,20.0);
+        System.out.println("Operand 1 ="+(calculator2.getOperandOne()));
+
+        */
+
+        /*
+        Box<Integer> box = new Box(90);
+        System.out.println("Box data = " + box.getData());
+
+        Box<Double> box1 = new Box(90.9);
+        System.out.println("Box data = " + box1.getData());
+
+        Box<String> box2 = new Box<>();
+        box2.setData("Hello Generics");
+        System.out.println("Box data = " + box2.getData());
+
+         */
+        Pair<Integer,Integer> integarPair=new Orderpair<>(8,2025);
+        System.out.println("Key = " + integarPair.getKey());
+        System.out.println("Value = " + integarPair.getValue());
+        Pair<Integer,String> pincode=new Orderpair<>(600097,"karapakkam");
+        System.out.println("pincode  = " + pincode.getKey());
+        System.out.println("pincode address  = " + pincode.getValue());
+
+        Pair<Integer,Box<Integer>> boxPair= new Orderpair<>(1, new Box<>(100));
+        System.out.println("Key = " + boxPair.getKey());
+        System.out.println("Box data = " + boxPair.getValue().getData());
+        System.out.println(boxPair);
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment2/Book.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment2/Book.java b/src/main/java/com/assignment8_collections/assignment2/Book.java
new file mode 100644
--- /dev/null	(date 1755544291091)
+++ b/src/main/java/com/assignment8_collections/assignment2/Book.java	(date 1755544291091)
@@ -0,0 +1,74 @@
+package com.assignment8_collections.assignment2;
+import java.util.*;
+public class Book extends Object implements Comparable<Book>{
+    private Integer bookId;
+    private String title;
+    private String author;
+    private Double price;
+
+    public Book(Integer bookId, String title, String author, Double price) {
+        this.bookId = bookId;
+        this.title = title;
+        this.author = author;
+        this.price = price;
+    }
+
+    public Integer getBookId() {
+        return bookId;
+    }
+
+    public void setBookId(Integer bookId) {
+        this.bookId = bookId;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getAuthor() {
+        return author;
+    }
+
+    public void setAuthor(String author) {
+        this.author = author;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Book{" +
+                "bookId=" + bookId +
+                ", title='" + title + '\'' +
+                ", author='" + author + '\'' +
+                ", price=" + price +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Book o) {
+        return this.title.compareTo(o.title);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Book book = (Book) o;
+        return Objects.equals(bookId, book.bookId) && Objects.equals(title, book.title) && Objects.equals(author, book.author) && Objects.equals(price, book.price);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(bookId, title, author, price);
+    }
+}
Index: src/main/java/com/oops/day9_generic/Calculator.java
===================================================================
diff --git a/src/main/java/com/oops/day9_generic/Calculator.java b/src/main/java/com/oops/day9_generic/Calculator.java
new file mode 100644
--- /dev/null	(date 1755494068502)
+++ b/src/main/java/com/oops/day9_generic/Calculator.java	(date 1755494068502)
@@ -0,0 +1,17 @@
+package com.oops.day9_generic;
+
+public class Calculator<T> {
+    T operandOne;
+    T operandTwo;
+
+    public Calculator() {
+
+    }
+    public Calculator(T operandOne, T operandTwo) {
+        this.operandOne = operandOne;
+        this.operandTwo = operandTwo;
+    }
+    public T getOperandOne() {
+        return this.operandOne;
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment2/Driver.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment2/Driver.java b/src/main/java/com/assignment8_collections/assignment2/Driver.java
new file mode 100644
--- /dev/null	(date 1755545062736)
+++ b/src/main/java/com/assignment8_collections/assignment2/Driver.java	(date 1755545062736)
@@ -0,0 +1,23 @@
+package com.assignment8_collections.assignment2;
+import java.util.*;
+public class Driver {
+    public static void main(String[] args) {
+
+        List<Book> books=new ArrayList<Book>();
+        books.add(new Book(1, "ddd", "zzz", 45.00));
+        books.add( new Book(2, "bbb", "yyy", 40.00));
+        books.add(new Book(3, "ccc", "xxx", 50.00));
+
+        System.out.println(books);
+       Collections.sort(books);
+
+        System.out.println("sorted books by name"+books);
+        Collections.sort(books, new PriceAscendingOrder());
+        System.out.println("sorted books by price"+books);
+        Collections.sort(books, new authorAlphabeticOrder());
+        System.out.println("sorted books by author name"+books);
+
+
+
+    }
+}
Index: src/main/java/com/assignment8_collections/assignment2/PriceAscendingOrder.java
===================================================================
diff --git a/src/main/java/com/assignment8_collections/assignment2/PriceAscendingOrder.java b/src/main/java/com/assignment8_collections/assignment2/PriceAscendingOrder.java
new file mode 100644
--- /dev/null	(date 1755545062710)
+++ b/src/main/java/com/assignment8_collections/assignment2/PriceAscendingOrder.java	(date 1755545062710)
@@ -0,0 +1,10 @@
+package com.assignment8_collections.assignment2;
+
+import java.util.*;
+
+public class PriceAscendingOrder implements Comparator<Book> {
+    @Override
+    public int compare(Book book1, Book book2) {
+        return Double.compare(book1.getPrice(), book2.getPrice());
+    }
+}
Index: src/main/java/com/oops/day10_set/Maps/Driver.java
===================================================================
diff --git a/src/main/java/com/oops/day10_set/Maps/Driver.java b/src/main/java/com/oops/day10_set/Maps/Driver.java
new file mode 100644
--- /dev/null	(date 1755592959176)
+++ b/src/main/java/com/oops/day10_set/Maps/Driver.java	(date 1755592959176)
@@ -0,0 +1,53 @@
+package com.oops.day10_set.Maps;
+import java.util.*;
+public class Driver {
+    public static void main(String[] args) {
+        Map<Integer, String> map = new HashMap<>();
+        map.put(60001, "chenai");
+        map.put(50001, "bangalore");
+        map.put(40001, "hyderabad");
+        System.out.println("map " + map);
+
+        map.put(40001,"mumbai");
+        System.out.println("map after updating " + map);
+        map.put(null,"india");
+        System.out.println("map after adding null key " + map);
+        map.put(600097,null);
+        System.out.println("map after adding null value " + map);
+
+        System.out.println("area of pin 60001 is "+map.get(60001));
+
+        if(map.containsKey(60001)){
+            System.out.println("area of pin 60001 is "+map.get(60001));
+        }
+        else {
+            System.out.println("pin not found");
+        }
+        System.out.println("area of pin 60001 is "+map.replace(null,"tamil nadu"));
+        System.out.println(map);
+        System.out.println("area of pin 60001 is "+map.replace(600097,"karapakkam"));
+        System.out.println(map);
+        System.out.println("remove 600097 pincode "+ map.remove(600097));
+        System.out.println("map after removing 600097 " + map);
+        System.out.println("all keys  "+map.keySet());
+        System.out.println("all values  "+map.values());
+        System.out.println("contains chennai  "+map.containsValue(60001));
+
+
+        Map<Integer, Employee> employeeMap = new HashMap<>();
+        employeeMap.put(8, new Employee(6, "Doe", 70000));
+        employeeMap.put(1, new Employee(8, "John", 50000));
+        employeeMap.put(2, new Employee(2, "Jane", 60000));
+        System.out.println("Employee Map (HashMap - unordered): " + employeeMap);
+
+        Map<Integer,Employee> orderedemployeemap=new LinkedHashMap<>();
+        orderedemployeemap.put(6,new Employee(1, "John", 50000));
+        orderedemployeemap.put(2,new Employee(2, "Jane", 60000));
+        orderedemployeemap.put(3,new Employee(3, "Doe", 7000));
+        System.out.println("ordered Employee Map: " + orderedemployeemap);
+
+        Map<Integer, Employee> sortedEmployeeMap = new TreeMap<>(orderedemployeemap);
+        System.out.println("Sorted Employee Map (TreeMap - sorted by keys): " + sortedEmployeeMap);
+
+    }
+}
diff --git a/src/main/java/day12_lambda_stream/Comparator.java b/src/main/java/day12_lambda_stream/Comparator.java
new file mode 100644
